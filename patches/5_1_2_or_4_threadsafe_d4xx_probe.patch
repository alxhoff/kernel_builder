From ddf8e809a47b0b3fe117287fa34f3aace8457500 Mon Sep 17 00:00:00 2001
From: Alexander Hoffman <alxhoff@gmail.com>
Date: Wed, 4 Dec 2024 17:16:03 +0100
Subject: [PATCH] Formatted

---
 .../tegra234-p3737-0000-camera-d4xx-qual.dtsi |  36 +-
 kernel/nvidia/drivers/media/i2c/d4xx.c        | 151 +++-----
 kernel/nvidia/drivers/media/i2c/max9295.c     | 342 +++++++++++-------
 kernel/nvidia/drivers/media/i2c/max9296.c     | 316 +++++++++-------
 4 files changed, 464 insertions(+), 381 deletions(-)

diff --git a/hardware/nvidia/platform/t23x/concord/kernel-dts/cvb/tegra234-p3737-0000-camera-d4xx-qual.dtsi b/hardware/nvidia/platform/t23x/concord/kernel-dts/cvb/tegra234-p3737-0000-camera-d4xx-qual.dtsi
index 2cc5e5f86..dd118fb60 100644
--- a/hardware/nvidia/platform/t23x/concord/kernel-dts/cvb/tegra234-p3737-0000-camera-d4xx-qual.dtsi
+++ b/hardware/nvidia/platform/t23x/concord/kernel-dts/cvb/tegra234-p3737-0000-camera-d4xx-qual.dtsi
@@ -232,20 +232,22 @@
 				ser0_prim: max9295_prim@40 {
 					status = "ok";
 					reg = <0x40>;
-					compatible = "maxim,max9295_0";
+					compatible = "maxim,max9295";
 					is-prim-ser;
 				};
 
 				ser0_a: max9295_a@42 {
-					compatible = "maxim,max9295_0";
+					compatible = "maxim,max9295";
 					reg = <0x42>;
 					maxim,gmsl-dser-device = <&dser0>;
+                    prim-ser = <&ser0_prim>;
 				};
 
 				ser0_b: max9295_b@60 {
-					compatible = "maxim,max9295_0";
+					compatible = "maxim,max9295";
 					reg = <0x60>;
 					maxim,gmsl-dser-device = <&dser0>;
+                    prim-ser = <&ser0_prim>;
 				};
 
 				d4m0_depth: d4m0_depth@0a {
@@ -253,7 +255,7 @@
 					def-addr = <0x10>;
 					def-d4m-addr = <0x1a>;
 					reg = <0x0a>;
-					compatible = "intel,d4xx_0";
+					compatible = "intel,d4xx";
 					vcc-supply = <&p3737_vdd_1v8_sys>;
 					cam-type = "Depth";
 					maxim,gmsl-ser-device = <&ser0_a>;
@@ -299,7 +301,7 @@
 					def-addr = <0x10>;
 					def-d4m-addr = <0x1a>;
 					reg = <0x0c>;
-					compatible = "intel,d4xx_0";
+					compatible = "intel,d4xx";
 					vcc-supply = <&p3737_vdd_1v8_sys>;
 					cam-type = "Y8";
 					maxim,gmsl-ser-device = <&ser0_a>;
@@ -346,7 +348,7 @@
 					def-addr = <0x10>;
 					def-d4m-addr = <0x1b>;
 					reg = <0x2a>;
-					compatible = "intel,d4xx_1";
+					compatible = "intel,d4xx";
 					vcc-supply = <&p3737_vdd_1v8_sys>;
 					cam-type = "Depth";
 					maxim,gmsl-ser-device = <&ser0_b>;
@@ -392,7 +394,7 @@
 					def-addr = <0x10>;
 					def-d4m-addr = <0x1b>;
 					reg = <0x2c>;
-					compatible = "intel,d4xx_1";
+					compatible = "intel,d4xx";
 					vcc-supply = <&p3737_vdd_1v8_sys>;
 					cam-type = "Y8";
 					maxim,gmsl-ser-device = <&ser0_b>;
@@ -453,20 +455,22 @@
 				ser1_prim: max9295_prim@40 {
 					status = "ok";
 					reg = <0x40>;
-					compatible = "maxim,max9295_1";
-					is-prim-ser;
+					compatible = "maxim,max9295";
+                    is-prim-ser;
 				};
 
 				ser1_a: max9295_a@42 {
-					compatible = "maxim,max9295_1";
-					reg = <0x42>;
+					compatible = "maxim,max9295";
+                    reg = <0x42>;
 					maxim,gmsl-dser-device = <&dser1>;
+                    prim-ser = <&ser1_prim>;
 				};
 
 				ser1_b: max9295_b@60 {
-					compatible = "maxim,max9295_1";
+					compatible = "maxim,max9295";
 					reg = <0x60>;
 					maxim,gmsl-dser-device = <&dser1>;
+                    prim-ser = <&ser1_prim>;
 				};
 
 				d4m2_depth: d4m2_depth@0a {
@@ -474,7 +478,7 @@
 					def-addr = <0x10>;
 					def-d4m-addr = <0x1c>;
 					reg = <0x0a>;
-					compatible = "intel,d4xx_2";
+					compatible = "intel,d4xx";
 					vcc-supply = <&p3737_vdd_1v8_sys>;
 					cam-type = "Depth";
 					maxim,gmsl-ser-device = <&ser1_a>;
@@ -519,7 +523,7 @@
 					def-addr = <0x10>;
 					def-d4m-addr = <0x1c>;
 					reg = <0x0c>;
-					compatible = "intel,d4xx_2";
+					compatible = "intel,d4xx";
 					vcc-supply = <&p3737_vdd_1v8_sys>;
 					cam-type = "Y8";
 					maxim,gmsl-ser-device = <&ser1_a>;
@@ -566,7 +570,7 @@
 					def-addr = <0x10>;
 					def-d4m-addr = <0x1d>;
 					reg = <0x2a>;
-					compatible = "intel,d4xx_3";
+					compatible = "intel,d4xx";
 					vcc-supply = <&p3737_vdd_1v8_sys>;
 					cam-type = "Depth";
 					maxim,gmsl-ser-device = <&ser1_b>;
@@ -612,7 +616,7 @@
 					def-addr = <0x10>;
 					def-d4m-addr = <0x1d>;
 					reg = <0x2c>;
-					compatible = "intel,d4xx_3";
+					compatible = "intel,d4xx";
 					vcc-supply = <&p3737_vdd_1v8_sys>;
 					cam-type = "Y8";
 					maxim,gmsl-ser-device = <&ser1_b>;
diff --git a/kernel/nvidia/drivers/media/i2c/d4xx.c b/kernel/nvidia/drivers/media/i2c/d4xx.c
index 0dcce1e03..4842648c6 100644
--- a/kernel/nvidia/drivers/media/i2c/d4xx.c
+++ b/kernel/nvidia/drivers/media/i2c/d4xx.c
@@ -469,7 +469,6 @@ struct ds5 {
 	const struct ds5_variant *variant;
 	int is_depth, is_y8, is_rgb, is_imu;
 	int aggregated;
-	int device_id;
 	u16 fw_version;
 	u16 fw_build;
 #ifdef CONFIG_VIDEO_D4XX_SERDES
@@ -2931,7 +2930,6 @@ static int ds5_board_setup(struct ds5 *state)
 		dev_err(dev, "serializer reg not found\n");
 		goto error;
 	}
-
 	ser_i2c = of_find_i2c_device_by_node(ser_node);
 	of_node_put(ser_node);
 
@@ -3043,16 +3041,6 @@ static int ds5_board_setup(struct ds5 *state)
 	state->g_ctx.num_csi_lanes = value;
 	state->g_ctx.s_dev = dev;
 
-	// for (i = 0; i < MAX_DEV_NUM; i++) {
-	// 	if (!serdes_inited[i]) {
-	// 		serdes_inited[i] = state;
-	// 		return 0;
-	// 	} else if (serdes_inited[i]->ser_dev == state->ser_dev) {
-	// 		return -ENOTSUPP;
-	// 	}
-	// }
-	// err = -EINVAL;
-	// dev_err(dev, "cannot handle more than %d D457 cameras\n", MAX_DEV_NUM);
 	return 0;
 error:
 	return err;
@@ -3231,34 +3219,30 @@ static int ds5_gmsl_serdes_setup(struct ds5 *state)
 
 	dev = &state->client->dev;
 
-	mutex_lock(&serdes_lock__);
+    mutex_lock(&serdes_lock__);
 
-	max9296_power_off(state->dser_dev);
-	msleep(200);
-	/* For now no separate power on required for serializer device */
-	max9296_power_on(state->dser_dev);
-	msleep(200);
+    /* setup serdes addressing and control pipeline */
+    err = max9296_setup_link(state->dser_dev, &state->client->dev);
+    if (err) {
+        dev_err(dev, "gmsl deserializer link config failed\n");
+        goto error;
+    }
 
-	dev_dbg(dev, "Setup SERDES addressing and control pipeline\n");
-	/* setup serdes addressing and control pipeline */
-	err = max9296_setup_link(state->dser_dev, &state->client->dev);
-	if (err) {
-		dev_err(dev, "gmsl deserializer link config failed\n");
-		goto error;
-	}
-	//msleep(100);
-	err = max9295_setup_control(state->ser_dev);
-
-	/* proceed even if ser setup failed, to setup deser correctly */
-	if (err)
-		dev_err(dev, "gmsl serializer setup failed\n");
-
-	des_err = max9296_setup_control(state->dser_dev, &state->client->dev);
-	if (des_err) {
-		dev_err(dev, "gmsl deserializer setup failed\n");
-		/* overwrite err only if deser setup also failed */
-		err = des_err;
-	}
+    msleep(100);
+
+    err = max9295_setup_control(state->ser_dev);
+    /* proceed even if ser setup failed, to setup deser correctly */
+    if (err){
+        dev_err(dev, "gmsl serializer setup failed\n");
+    }
+
+    des_err = max9296_setup_control(state->dser_dev, &state->client->dev);
+    if (des_err) {
+        dev_err(dev, "gmsl deserializer setup failed\n");
+        /* overwrite err only if deser setup also failed */
+        err = des_err;
+        goto error;
+    }
 
 error:
 	mutex_unlock(&serdes_lock__);
@@ -3312,8 +3296,6 @@ static int ds5_i2c_addr_setting(struct i2c_client *c, struct ds5 *state)
 }
 #endif
 
-static int d4xx_gmsl_init_flag[4] = {0,0,0,0};
-
 static int ds5_serdes_setup(struct ds5 *state)
 {
 	int ret = 0;
@@ -3350,53 +3332,39 @@ static int ds5_serdes_setup(struct ds5 *state)
 		return ret;
 	}
 
-	if(d4xx_gmsl_init_flag[state->device_id] == 0){
-		/* Pair sensor to serializer dev */
-		ret = max9295_sdev_pair(state->ser_dev, &state->g_ctx);
-		if (ret) {
-			dev_err(&c->dev, "gmsl ser pairing failed\n");
-			return ret;
-		}
-
-		/* Register sensor to deserializer dev */
-		ret = max9296_sdev_register(state->dser_dev, &state->g_ctx);
-		if (ret) {
-			dev_err(&c->dev, "gmsl deserializer register failed\n");
-			return ret;
-		}
-		d4xx_gmsl_init_flag[state->device_id] = 1;
-	}
-
-	
-	if(d4xx_gmsl_init_flag[state->device_id] == 1){
-		ret = ds5_gmsl_serdes_setup(state);
-		if (ret) {
-			dev_err(&c->dev, "%s gmsl serdes setup failed, ret=%d\n", __func__, ret);
-			d4xx_gmsl_init_flag[state->device_id] = 3;
-			return ret;
-		}
-
-		ret = max9295_init_settings(state->ser_dev);
-		if (ret) {
-			dev_warn(&c->dev, "%s, failed to init max9295 settings\n",
-				__func__);
-			d4xx_gmsl_init_flag[state->device_id] = 3;
-			return ret;
-		}
-
-		ret = max9296_init_settings(state->dser_dev);
-		if (ret) {
-			dev_warn(&c->dev, "%s, failed to init max9296 settings\n",
-				__func__);
-			d4xx_gmsl_init_flag[state->device_id] = 4;
-			return ret;
-		}
-		d4xx_gmsl_init_flag[state->device_id] = 2;
-	}else if(d4xx_gmsl_init_flag[state->device_id] == 2){
-		return 0;
-	}else{
-		return -EINVAL;
-	}
+    /* Pair sensor to serializer dev */
+    ret = max9295_sdev_pair(state->ser_dev, &state->g_ctx);
+    if (ret) {
+        dev_err(&c->dev, "gmsl ser pairing failed\n");
+        return ret;
+    }
+
+    /* Register sensor to deserializer dev */
+    ret = max9296_sdev_register(state->dser_dev, &state->g_ctx);
+    if (ret) {
+        dev_err(&c->dev, "gmsl deserializer register failed\n");
+        return ret;
+    }
+
+    ret = ds5_gmsl_serdes_setup(state);
+    if (ret) {
+        dev_err(&c->dev, "%s gmsl serdes setup failed, ret=%d\n", __func__, ret);
+        return ret;
+    }
+
+    ret = max9295_init_settings(state->ser_dev);
+    if (ret) {
+        dev_warn(&c->dev, "%s, failed to init max9295 settings\n",
+            __func__);
+        return ret;
+    }
+
+    ret = max9296_init_settings(state->dser_dev);
+    if (ret) {
+        dev_warn(&c->dev, "%s, failed to init max9296 settings\n",
+            __func__);
+        return ret;
+    }
 	
 	return ret;
 }
@@ -5446,8 +5414,7 @@ static int ds5_probe(struct i2c_client *c, const struct i2c_device_id *id)
 
 	state->client = c;
 	dev_warn(&c->dev, "Probing driver for D45x, id = %ld, name = %s\n", id->driver_data, id->name);
-	state->device_id = id->driver_data;
-	state->variant = ds5_variants + 0;//id->driver_data;
+	state->variant = ds5_variants + 0;
 #ifdef CONFIG_OF
 	state->vcc = devm_regulator_get(&c->dev, "vcc");
 	if (IS_ERR(state->vcc)) {
@@ -5627,7 +5594,6 @@ static int ds5_remove(struct i2c_client *c)
 			//break;
 		}
 	//}
-	d4xx_gmsl_init_flag[state->device_id] = false;
 	if (state->ser_i2c)
 		i2c_unregister_device(state->ser_i2c);
 	if (state->dser_i2c)
@@ -5659,10 +5625,7 @@ static const struct i2c_device_id ds5_id[] = {
 	// { DS5_DRIVER_NAME, DS5_DS5U },
 	// { DS5_DRIVER_NAME_ASR, DS5_ASR },
 	// { DS5_DRIVER_NAME_AWG, DS5_AWG },
-	{ "d4xx_0", 0 },
-	{ "d4xx_1", 1 },
-	{ "d4xx_2", 2 },
-	{ "d4xx_3", 3 },
+	{ "d4xx", 0 },
 	{ },
 };
 MODULE_DEVICE_TABLE(i2c, ds5_id);
diff --git a/kernel/nvidia/drivers/media/i2c/max9295.c b/kernel/nvidia/drivers/media/i2c/max9295.c
index 0e6ff805a..271e58a14 100644
--- a/kernel/nvidia/drivers/media/i2c/max9295.c
+++ b/kernel/nvidia/drivers/media/i2c/max9295.c
@@ -111,10 +111,12 @@ struct max9295 {
 	/* primary serializer properties */
 	__u32 def_addr;
 	__u32 pst2_ref;
-	u8 prim_id;
-};
+    bool paired;
 
-static struct max9295 *prim_priv__[4];
+    struct max9295 *prim_priv;
+    bool prim_control_setup;
+    bool prim_settings_setup;
+};
 
 struct map_ctx {
 	u8 dt;
@@ -304,77 +306,90 @@ int max9295_setup_control(struct device *dev)
 		0xC4, 0x02, 0x03,
 	};
 
+    if(!priv){
+        dev_err(dev, "Couldn't get drvdata");
+        err = -EINVAL;
+        goto error;
+    }
+
 	mutex_lock(&priv->lock);
 
-	if (!priv->g_client.g_ctx) {
-		dev_err(dev, "%s: no sensor dev client found\n", __func__);
-		err = -EINVAL;
-		goto error;
-	}
+    if(!priv->prim_priv){
+        goto error;
+    }
 
-	g_ctx = priv->g_client.g_ctx;
+    mutex_lock(&priv->prim_priv->lock);
 
-	if (prim_priv__[priv->prim_id]) {
-		/* update address reassingment */
-		max9295_write_reg(&prim_priv__[priv->prim_id]->i2c_client->dev,
-				MAX9295_DEV_ADDR, (g_ctx->ser_reg << 1));
-	}
+    if(!priv->prim_priv->prim_control_setup){
 
-	if (g_ctx->serdes_csi_link == GMSL_SERDES_CSI_LINK_A)
-		err = max9295_write_reg(dev, MAX9295_CTRL0_ADDR, 0x21);
-	else
-		err = max9295_write_reg(dev, MAX9295_CTRL0_ADDR, 0x22);
+        if (!priv->g_client.g_ctx) {
+            dev_err(dev, "%s: no sensor dev client found\n", __func__);
+            err = -EINVAL;
+            goto unlock;
+        }
 
-	/* check if serializer device exists */
-	if (err) {
-		dev_err(dev, "%s: ERROR: ser device not found\n", __func__);
-		goto error;
-	}
+        g_ctx = priv->g_client.g_ctx;
 
-	/* delay to settle link */
-	msleep(100);
+        /* update address reassingment */
+        max9295_write_reg(&priv->prim_priv->i2c_client->dev,
+                MAX9295_DEV_ADDR, (g_ctx->ser_reg << 1));
 
-	for (i = 0; i < ARRAY_SIZE(addr_offset); i += 3) {
-		if ((g_ctx->ser_reg << 1) == addr_offset[i]) {
-			offset1 = addr_offset[i+1];
-			offset2 = addr_offset[i+2];
-			break;
-		}
-	}
+        if (g_ctx->serdes_csi_link == GMSL_SERDES_CSI_LINK_A)
+            err = max9295_write_reg(dev, MAX9295_CTRL0_ADDR, 0x21);
+        else
+            err = max9295_write_reg(dev, MAX9295_CTRL0_ADDR, 0x22);
 
-	if (i == ARRAY_SIZE(addr_offset)) {
-		dev_err(dev, "%s: invalid ser slave address\n", __func__);
-		err = -EINVAL;
-		goto error;
-	}
+        /* check if serializer device exists */
+        if (err) {
+            dev_err(dev, "%s: ERROR: ser device not found\n", __func__);
+            goto unlock;
+        }
 
-	for (i = 0; i < ARRAY_SIZE(i2c_ovrd); i += 2) {
-		/* update address overrides */
-		i2c_ovrd[i+1] += (i < 4) ? offset1 : offset2;
+        /* delay to settle link */
+        msleep(100);
 
-		/* i2c passthrough2 must be configured once for all devices */
-		if ((i2c_ovrd[i] == 0x8B) && prim_priv__[priv->prim_id] &&
-				prim_priv__[priv->prim_id]->pst2_ref)
-			continue;
+        for (i = 0; i < ARRAY_SIZE(addr_offset); i += 3) {
+            if ((g_ctx->ser_reg << 1) == addr_offset[i]) {
+                offset1 = addr_offset[i+1];
+                offset2 = addr_offset[i+2];
+                break;
+            }
+        }
 
-		max9295_write_reg(dev, i2c_ovrd[i], i2c_ovrd[i+1]);
-	}
+        if (i == ARRAY_SIZE(addr_offset)) {
+            dev_err(dev, "%s: invalid ser slave address\n", __func__);
+            err = -EINVAL;
+            goto unlock;
+        }
 
-	/* dev addr pass-through2 ref */
-	if (prim_priv__[priv->prim_id])
-		prim_priv__[priv->prim_id]->pst2_ref++;
+        for (i = 0; i < ARRAY_SIZE(i2c_ovrd); i += 2) {
+            /* update address overrides */
+            i2c_ovrd[i+1] += (i < 4) ? offset1 : offset2;
 
-	max9295_write_reg(dev, MAX9295_I2C4_ADDR, (g_ctx->sdev_reg << 1));
-	max9295_write_reg(dev, MAX9295_I2C5_ADDR, (g_ctx->sdev_def << 1));
+            /* i2c passthrough2 must be configured once for all devices */
+            if ((i2c_ovrd[i] == 0x8B) && priv->prim_priv->pst2_ref){
+                continue;
+            }
+            max9295_write_reg(dev, i2c_ovrd[i], i2c_ovrd[i+1]);
+        }
 
-	max9295_write_reg(dev, MAX9295_SRC_PWDN_ADDR, MAX9295_PWDN_GPIO);
-	max9295_write_reg(dev, MAX9295_SRC_CTRL_ADDR, MAX9295_RESET_SRC);
-	max9295_write_reg(dev, MAX9295_SRC_OUT_RCLK_ADDR, MAX9295_SRC_RCLK);
+        priv->prim_priv->pst2_ref++;
 
-	g_ctx->serdev_found = true;
+        max9295_write_reg(dev, MAX9295_I2C4_ADDR, (g_ctx->sdev_reg << 1));
+        max9295_write_reg(dev, MAX9295_I2C5_ADDR, (g_ctx->sdev_def << 1));
 
+        max9295_write_reg(dev, MAX9295_SRC_PWDN_ADDR, MAX9295_PWDN_GPIO);
+        max9295_write_reg(dev, MAX9295_SRC_CTRL_ADDR, MAX9295_RESET_SRC);
+        max9295_write_reg(dev, MAX9295_SRC_OUT_RCLK_ADDR, MAX9295_SRC_RCLK);
+
+        g_ctx->serdev_found = true;
+        priv->prim_priv->prim_control_setup = true;
+    }
+
+unlock:
+    mutex_unlock(&priv->prim_priv->lock);
 error:
-	mutex_unlock(&priv->lock);
+    mutex_unlock(&priv->lock);
 	return err;
 }
 EXPORT_SYMBOL(max9295_setup_control);
@@ -384,28 +399,44 @@ int max9295_reset_control(struct device *dev)
 	struct max9295 *priv = dev_get_drvdata(dev);
 	int err = 0;
 
-	mutex_lock(&priv->lock);
-	if (!priv->g_client.g_ctx) {
-		dev_err(dev, "%s: no sdev client found\n", __func__);
-		err = -EINVAL;
-		goto error;
-	}
+    if(!priv){
+        dev_err(dev, "Couldn't get drvdata");
+        err = -EINVAL;
+        goto ret;
+    }
 
-	priv->g_client.st_done = false;
+    mutex_lock(&priv->lock);
 
-	if (prim_priv__[priv->prim_id]) {
-		prim_priv__[priv->prim_id]->pst2_ref--;
+    if (!priv->g_client.g_ctx) {
+        dev_err(dev, "%s: no sdev client found\n", __func__);
+        err = -EINVAL;
+        goto error;
+    }
 
-		max9295_write_reg(dev, MAX9295_DEV_ADDR,
-					(prim_priv__[priv->prim_id]->def_addr << 1));
-		if (prim_priv__[priv->prim_id]->pst2_ref == 0){
-			max9295_write_reg(&prim_priv__[priv->prim_id]->i2c_client->dev,
-						MAX9295_CTRL0_ADDR, MAX9295_RESET_ALL);
-		}	
-	}
+    priv->g_client.st_done = false;
+
+    if(!priv->prim_priv){
+        dev_err(dev, "%s prim_priv doesn't exist\n", __func__);
+        goto error;
+    }
+
+    mutex_lock(&priv->prim_priv->lock);
+
+    priv->prim_priv->pst2_ref--;
+    max9295_write_reg(dev, MAX9295_DEV_ADDR,
+                (priv->prim_priv->def_addr << 1));
+    if(priv->prim_priv->pst2_ref == 0){
+        max9295_write_reg(&priv->prim_priv->i2c_client->dev,
+                    MAX9295_CTRL0_ADDR, MAX9295_RESET_ALL);
+    }
+
+    priv->prim_priv->prim_control_setup = false;
+
+    mutex_unlock(&priv->prim_priv->lock);
 
 error:
 	mutex_unlock(&priv->lock);
+ret:
 	return err;
 }
 EXPORT_SYMBOL(max9295_reset_control);
@@ -413,24 +444,26 @@ EXPORT_SYMBOL(max9295_reset_control);
 int max9295_sdev_pair(struct device *dev, struct gmsl_link_ctx *g_ctx)
 {
 	struct max9295 *priv;
-	int err = 0;
 
-	if (!dev || !g_ctx || !g_ctx->s_dev) {
-		dev_err(dev, "%s: invalid input params\n", __func__);
-		return -EINVAL;
+	if (!dev || !g_ctx || ! g_ctx->s_dev) {
+        dev_err(dev, "%s: invalid input params\n", __func__);
+        return -EINVAL;
 	}
 
 	priv = dev_get_drvdata(dev);
 	mutex_lock(&priv->lock);
-	if (priv->g_client.g_ctx) {
-		dev_err(dev, "%s: device already paired\n", __func__);
-		err = -EINVAL;
-		goto error;
-	}
+    if(!priv->paired){
+        if (priv->g_client.g_ctx) {
+            dev_err(dev, "%s: device already paired\n", __func__);
+            goto error;
+        }
 
-	priv->g_client.st_done = false;
+        priv->g_client.st_done = false;
 
-	priv->g_client.g_ctx = g_ctx;
+        priv->g_client.g_ctx = g_ctx;
+
+        priv->paired = true;
+    }
 
 error:
 	mutex_unlock(&priv->lock);
@@ -467,6 +500,9 @@ int max9295_sdev_unpair(struct device *dev, struct device *s_dev)
 	priv->g_client.g_ctx = NULL;
 	priv->g_client.st_done = false;
 
+    priv->paired = false;
+    //TODO prim_settings_setup is never reset
+
 error:
 	mutex_unlock(&priv->lock);
 	return err;
@@ -566,51 +602,68 @@ int max9295_init_settings(struct device *dev)
 	int i;
 	struct max9295 *priv = dev_get_drvdata(dev);
 
-	struct reg_pair map_pipe_opt[] = {
-		// Enable all pipes
-		{MAX9295_PIPE_EN_ADDR, 0xF3},
-		// Write 0x33 for 4 lanes
-		{MAX9295_MIPI_RX1_ADDR, 0x11},
-		// All pipes pull clock from port B
-		{MAX9295_CSI_PORT_SEL_ADDR, 0x6F},
-		// All pipes pull data from port B
-		{MAX9295_START_PIPE_ADDR, 0xF0},
-	};
-
-	static struct reg_pair map_depth_trigger[] = {
-	//	{0x02D6, 0x84}, // #MFP8
-	//	{0x02D7, 0x60}, // #OUT_TYPE bit to 1
-	//	{0x02D8, 0x1F},
-		{0x02C1, 0x84}, // #MFP1
-		{0x02C2, 0x20}, // #OUT_TYPE bit to 1 (no pullup)
-		{0x02C3, 0x1F},
-	};
-
-	static struct reg_pair map_rgb_trigger[] = {
-		{0x02BE, 0x84}, // #MFP0
-		{0x02BF, 0x20}, // #OUT_TYPE bit to 1  (no pullup)
-		{0x02C0, 0x1B},
-	};
-
-	mutex_lock(&priv->lock);
-	
-	// Init control
-	err |= max9295_set_registers(dev, map_pipe_opt,
-				     ARRAY_SIZE(map_pipe_opt));
-
-	for (i = 0; i < MAX9295_MAX_PIPES; i++)
-		err |= __max9295_set_pipe(dev, i, GMSL_CSI_DT_YUV422_8,
-					  GMSL_CSI_DT_EMBED, i);
-
-	// Trigger Depth
-	err |= max9295_set_registers(dev, map_depth_trigger,
-				     ARRAY_SIZE(map_depth_trigger));
-	// Trigger RGB
-	err |= max9295_set_registers(dev, map_rgb_trigger,
-				     ARRAY_SIZE(map_rgb_trigger));
-
-	mutex_unlock(&priv->lock);
-
+    struct reg_pair map_pipe_opt[] = {
+        // Enable all pipes
+        {MAX9295_PIPE_EN_ADDR, 0xF3},
+        // Write 0x33 for 4 lanes
+        {MAX9295_MIPI_RX1_ADDR, 0x11},
+        // All pipes pull clock from port B
+        {MAX9295_CSI_PORT_SEL_ADDR, 0x6F},
+        // All pipes pull data from port B
+        {MAX9295_START_PIPE_ADDR, 0xF0},
+    };
+
+    static struct reg_pair map_depth_trigger[] = {
+    //	{0x02D6, 0x84}, // #MFP8
+    //	{0x02D7, 0x60}, // #OUT_TYPE bit to 1
+    //	{0x02D8, 0x1F},
+        {0x02C1, 0x84}, // #MFP1
+        {0x02C2, 0x20}, // #OUT_TYPE bit to 1 (no pullup)
+        {0x02C3, 0x1F},
+    };
+
+    static struct reg_pair map_rgb_trigger[] = {
+        {0x02BE, 0x84}, // #MFP0
+        {0x02BF, 0x20}, // #OUT_TYPE bit to 1  (no pullup)
+        {0x02C0, 0x1B},
+    };
+
+    if(!priv){
+        goto ret;
+    }
+
+    mutex_lock(&priv->lock);
+
+    if(!priv->prim_priv){
+        goto unlock;
+    }
+
+    mutex_lock(&priv->prim_priv->lock);
+
+    if(!priv->prim_priv->prim_settings_setup){
+
+        // Init control
+        err |= max9295_set_registers(dev, map_pipe_opt,
+                         ARRAY_SIZE(map_pipe_opt));
+
+        for (i = 0; i < MAX9295_MAX_PIPES; i++)
+            err |= __max9295_set_pipe(dev, i, GMSL_CSI_DT_YUV422_8,
+                          GMSL_CSI_DT_EMBED, i);
+
+        // Trigger Depth
+        err |= max9295_set_registers(dev, map_depth_trigger,
+                         ARRAY_SIZE(map_depth_trigger));
+        // Trigger RGB
+        err |= max9295_set_registers(dev, map_rgb_trigger,
+                         ARRAY_SIZE(map_rgb_trigger));
+
+        priv->prim_priv->prim_settings_setup = true;
+    }
+
+    mutex_unlock(&priv->prim_priv->lock);
+unlock:
+    mutex_unlock(&priv->lock);
+ret:
 	return err;
 }
 EXPORT_SYMBOL(max9295_init_settings);
@@ -646,6 +699,8 @@ static int max9295_probe(struct i2c_client *client,
 	struct max9295 *priv;
 	int err = 0;
 	struct device_node *node = client->dev.of_node;
+    struct device_node *prim_node;
+    struct i2c_client *prim_client;
 
 	dev_info(&client->dev, "[MAX9295]: probing GMSL Serializer\n");
 
@@ -660,22 +715,31 @@ static int max9295_probe(struct i2c_client *client,
 	}
 
 	mutex_init(&priv->lock);
-	priv->prim_id = id->driver_data;
-	if (of_get_property(node, "is-prim-ser", NULL)) {
-		if (prim_priv__[priv->prim_id]) {
-			dev_err(&client->dev,
-				"prim-ser already exists\n");
-				return -EEXIST;
-		}
 
+    //primary specific init
+	if (of_get_property(node, "is-prim-ser", NULL)) {
 		err = of_property_read_u32(node, "reg", &priv->def_addr);
 		if (err < 0) {
 			dev_err(&client->dev, "reg not found\n");
 			return -EINVAL;
 		}
 
-		prim_priv__[priv->prim_id] = priv;
-	}
+	}else{ //non-primary specific init
+        prim_node = of_parse_phandle(node, "prim-ser", 0);
+        if(!prim_node){
+            dev_err(&client->dev, "Failed to get primary serializer phandle");
+            return -EINVAL;
+        }
+
+        prim_client = of_find_i2c_device_by_node(prim_node);
+        of_node_put(prim_node);
+        if(!prim_client){
+            dev_err(&client->dev, "Failed to get primary i2c client");
+            return -EPROBE_DEFER; // Try again later
+        }
+
+        priv->prim_priv = i2c_get_clientdata(prim_client);
+    }
 
 	dev_set_drvdata(&client->dev, priv);
 
@@ -700,8 +764,7 @@ static int max9295_remove(struct i2c_client *client)
 }
 
 static const struct i2c_device_id max9295_id[] = {
-	{ "max9295_0", 0 },
-	{ "max9295_1", 1 },
+	{ "max9295", 0 },
 	{ },
 };
 
@@ -737,4 +800,5 @@ module_exit(max9295_exit);
 
 MODULE_DESCRIPTION("GMSL Serializer driver max9295");
 MODULE_AUTHOR("Sudhir Vyas <svyas@nvidia.com>");
+MODULE_AUTHOR("Alex Hoffman <alxhoff@cartken.com>");
 MODULE_LICENSE("GPL v2");
diff --git a/kernel/nvidia/drivers/media/i2c/max9296.c b/kernel/nvidia/drivers/media/i2c/max9296.c
index e0e1b8635..86c2d550b 100644
--- a/kernel/nvidia/drivers/media/i2c/max9296.c
+++ b/kernel/nvidia/drivers/media/i2c/max9296.c
@@ -119,13 +119,15 @@ struct max9296 {
 	u32 sdev_ref;
 	bool lane_setup;
 	bool link_setup;
+    bool settings_setup;
+    bool control_setup;
+    bool paired;
 	struct pipe_ctx pipe[MAX9296_MAX_PIPES];
 	u8 csi_mode;
 	u8 lane_mp1;
 	u8 lane_mp2;
 	int reset_gpio;
 	int pw_ref;
-	int init_flag;
 	struct regulator *vdd_cam_1v2;
 };
 
@@ -228,7 +230,6 @@ static void max9296_reset_ctx(struct max9296 *priv)
 	priv->num_src_found = 0;
 	priv->src_link = 0;
 	priv->splitter_enabled = false;
-	priv->init_flag = false;
 	max9296_pipes_reset(priv);
 	for (i = 0; i < priv->num_src; i++)
 		priv->sources[i].st_enabled = false;
@@ -325,24 +326,36 @@ int max9296_setup_link(struct device *dev, struct device *s_dev)
 	int err = 0;
 	unsigned int i = 0;
 
-	err = max9296_get_sdev_idx(dev, s_dev, &i);
-	if (err)
-		return err;
+    mutex_lock(&priv->lock);
+    if(!priv->link_setup){
+        mutex_unlock(&priv->lock);
 
-	mutex_lock(&priv->lock);
+        max9296_power_off(dev);
+        msleep(200);
+        max9296_power_on(dev);
+        msleep(200);
 
-	if (!priv->splitter_enabled) {
-		err = max9296_write_link(dev,
-				priv->sources[i].g_ctx->serdes_csi_link);
-		if (err)
-			goto ret;
+        err = max9296_get_sdev_idx(dev, s_dev, &i);
+        if (err){
+            goto ret;
+        }
 
-		priv->link_setup = true;
-	}
+        mutex_lock(&priv->lock);
 
-ret:
-	mutex_unlock(&priv->lock);
+        if (!priv->splitter_enabled) {
+            err = max9296_write_link(dev,
+                    priv->sources[i].g_ctx->serdes_csi_link);
+            if (err){
+                goto unlock;
+            }
+
+            priv->link_setup = true;
+        }
+    }
 
+unlock:
+	mutex_unlock(&priv->lock);
+ret:
 	return err;
 }
 EXPORT_SYMBOL(max9296_setup_link);
@@ -353,55 +366,66 @@ int max9296_setup_control(struct device *dev, struct device *s_dev)
 	int err = 0;
 	unsigned int i = 0;
 
-	err = max9296_get_sdev_idx(dev, s_dev, &i);
-	if (err)
-		return err;
+    if(!priv){
+        dev_err(dev, "Couldn't get drvdata");
+        return -EINVAL;
+    }
 
-	mutex_lock(&priv->lock);
+    if(!priv->control_setup){
+        err = max9296_get_sdev_idx(dev, s_dev, &i);
+        if (err){
+            goto error;
+        }
 
-	if (!priv->link_setup) {
-		dev_err(dev, "%s: invalid state\n", __func__);
-		err = -EINVAL;
-		goto error;
-	}
+	    mutex_lock(&priv->lock);
 
-	if (priv->sources[i].g_ctx->serdev_found) {
-		priv->num_src_found++;
-		priv->src_link = priv->sources[i].g_ctx->serdes_csi_link;
-	}
+        if (!priv->link_setup) {
+            dev_err(dev, "%s: invalid state\n", __func__);
+            err = -EINVAL;
+            goto unlock;
+        }
 
-	/* Enable splitter mode */
-	if ((priv->max_src > 1U) &&
-		(priv->num_src_found > 1U) &&
-		(priv->splitter_enabled == false)) {
-		max9296_write_reg(dev, MAX9296_CTRL0_ADDR, 0x03);
-		max9296_write_reg(dev, MAX9296_CTRL0_ADDR, 0x23);
+        if (priv->sources[i].g_ctx->serdev_found) {
+            priv->num_src_found++;
+            priv->src_link = priv->sources[i].g_ctx->serdes_csi_link;
+        }
 
-		priv->splitter_enabled = true;
+        /* Enable splitter mode */
+        if ((priv->max_src > 1U) &&
+            (priv->num_src_found > 1U) &&
+            (priv->splitter_enabled == false)) {
+            max9296_write_reg(dev, MAX9296_CTRL0_ADDR, 0x03);
+            max9296_write_reg(dev, MAX9296_CTRL0_ADDR, 0x23);
 
-		/* delay to settle link */
-		msleep(100);
-	}
+            priv->splitter_enabled = true;
 
-	max9296_write_reg(dev,
-			MAX9296_PWDN_PHYS_ADDR, MAX9296_ALLPHYS_NOSTDBY);
+            /* delay to settle link */
+            msleep(100);
+        }
 
-	priv->sdev_ref++;
+        max9296_write_reg(dev,
+                MAX9296_PWDN_PHYS_ADDR, MAX9296_ALLPHYS_NOSTDBY);
 
-	/* Reset splitter mode if all devices are not found */
-	if ((priv->sdev_ref == priv->max_src) &&
-		(priv->splitter_enabled == true) &&
-		(priv->num_src_found > 0U) &&
-		(priv->num_src_found < priv->max_src)) {
-		err = max9296_write_link(dev, priv->src_link);
-		if (err)
-			goto error;
+        priv->sdev_ref++;
 
-		priv->splitter_enabled = false;
-	}
+        /* Reset splitter mode if all devices are not found */
+        if ((priv->sdev_ref == priv->max_src) &&
+            (priv->splitter_enabled == true) &&
+            (priv->num_src_found > 0U) &&
+            (priv->num_src_found < priv->max_src)) {
+            err = max9296_write_link(dev, priv->src_link);
+            if (err)
+                goto unlock;
 
-error:
+            priv->splitter_enabled = false;
+        }
+
+        priv->control_setup = true;
+    }
+
+unlock:
 	mutex_unlock(&priv->lock);
+error:
 	return err;
 }
 EXPORT_SYMBOL(max9296_setup_control);
@@ -411,24 +435,35 @@ int max9296_reset_control(struct device *dev, struct device *s_dev)
 	struct max9296 *priv = dev_get_drvdata(dev);
 	int err = 0;
 
-	mutex_lock(&priv->lock);
-	if (!priv->sdev_ref) {
-		dev_info(dev, "%s: dev is already in reset state\n", __func__);
-		goto ret;
-	}
-
-	priv->sdev_ref--;
-	if (priv->sdev_ref == 0) {
-		max9296_reset_ctx(priv);
-		max9296_write_reg(dev, MAX9296_CTRL0_ADDR, MAX9296_RESET_ALL);
-
-		/* delay to settle reset */
-		msleep(100);
-	}
-
-ret:
+    if(!priv){
+        dev_err(dev, "Couldn't get drvdata\n");
+        err = -EINVAL;
+        goto ret;
+    }
+
+    mutex_lock(&priv->lock);
+    if (!priv->sdev_ref) {
+        dev_info(dev, "%s: dev is already in reset state\n", __func__);
+        priv->control_setup = false;
+        goto unlock;
+    }
+
+    priv->sdev_ref--;
+    if (priv->sdev_ref == 0) {
+        max9296_reset_ctx(priv);
+        max9296_write_reg(dev, MAX9296_CTRL0_ADDR, MAX9296_RESET_ALL);
+
+        priv->control_setup = false;
+
+        mutex_unlock(&priv->lock);
+        /* delay to settle reset */
+        msleep(100);
+        goto ret;
+    }
+
+unlock:
 	mutex_unlock(&priv->lock);
-
+ret:
 	return err;
 }
 EXPORT_SYMBOL(max9296_reset_control);
@@ -440,61 +475,65 @@ int max9296_sdev_register(struct device *dev, struct gmsl_link_ctx *g_ctx)
 	int err = 0;
 
 	if (!dev || !g_ctx || !g_ctx->s_dev) {
-		dev_err(dev, "%s: invalid input params\n", __func__);
-		return -EINVAL;
+        dev_err(dev, "%s: invalid input params\n", __func__);
+        return -EINVAL;
 	}
 
 	priv = dev_get_drvdata(dev);
 
 	mutex_lock(&priv->lock);
 
-	if (priv->num_src > priv->max_src) {
-		dev_err(dev,
-			"%s: MAX9296 inputs size exhausted\n", __func__);
-		err = -ENOMEM;
-		goto error;
-	}
-
-	/* Check csi mode compatibility */
-	if (!((priv->csi_mode == MAX9296_CSI_MODE_2X4) ?
-			((g_ctx->csi_mode == GMSL_CSI_1X4_MODE) ||
-				(g_ctx->csi_mode == GMSL_CSI_2X4_MODE)) :
-			((g_ctx->csi_mode == GMSL_CSI_2X2_MODE) ||
-				(g_ctx->csi_mode == GMSL_CSI_4X2_MODE)))) {
-		dev_err(dev,
-			"%s: csi mode not supported\n", __func__);
-		err = -EINVAL;
-		goto error;
-	}
-
-	for (i = 0; i < priv->num_src; i++) {
-		if (g_ctx->serdes_csi_link ==
-			priv->sources[i].g_ctx->serdes_csi_link) {
-			dev_err(dev,
-				"%s: serdes csi link is in use\n", __func__);
-			err = 0;
-			goto error;
-		}
-		/*
-		 * All sdevs should have same num-csi-lanes regardless of
-		 * dst csi port selected.
-		 * Later if there is any usecase which requires each port
-		 * to be configured with different num-csi-lanes, then this
-		 * check should be performed per port.
-		 */
-		if (g_ctx->num_csi_lanes !=
-				priv->sources[i].g_ctx->num_csi_lanes) {
-			dev_err(dev,
-				"%s: csi num lanes mismatch\n", __func__);
-			err = -EINVAL;
-			goto error;
-		}
-	}
-
-	priv->sources[priv->num_src].g_ctx = g_ctx;
-	priv->sources[priv->num_src].st_enabled = false;
-
-	priv->num_src++;
+    if(!priv->paired){
+        if (priv->num_src > priv->max_src) {
+            dev_err(dev,
+                "%s: MAX9296 inputs size exhausted\n", __func__);
+            err = -ENOMEM;
+            goto error;
+        }
+
+        /* Check csi mode compatibility */
+        if (!((priv->csi_mode == MAX9296_CSI_MODE_2X4) ?
+                ((g_ctx->csi_mode == GMSL_CSI_1X4_MODE) ||
+                    (g_ctx->csi_mode == GMSL_CSI_2X4_MODE)) :
+                ((g_ctx->csi_mode == GMSL_CSI_2X2_MODE) ||
+                    (g_ctx->csi_mode == GMSL_CSI_4X2_MODE)))) {
+            dev_err(dev,
+                "%s: csi mode not supported\n", __func__);
+            err = -EINVAL;
+            goto error;
+        }
+
+        for (i = 0; i < priv->num_src; i++) {
+            if (g_ctx->serdes_csi_link ==
+                priv->sources[i].g_ctx->serdes_csi_link) {
+                dev_err(dev,
+                    "%s: serdes csi link is in use\n", __func__);
+                err = 0;
+                goto error;
+            }
+            /*
+             * All sdevs should have same num-csi-lanes regardless of
+             * dst csi port selected.
+             * Later if there is any usecase which requires each port
+             * to be configured with different num-csi-lanes, then this
+             * check should be performed per port.
+             */
+            if (g_ctx->num_csi_lanes !=
+                    priv->sources[i].g_ctx->num_csi_lanes) {
+                dev_err(dev,
+                    "%s: csi num lanes mismatch\n", __func__);
+                err = -EINVAL;
+                goto error;
+            }
+        }
+
+        priv->sources[priv->num_src].g_ctx = g_ctx;
+        priv->sources[priv->num_src].st_enabled = false;
+
+        priv->num_src++;
+
+        priv->paired = true;
+    }
 
 error:
 	mutex_unlock(&priv->lock);
@@ -537,6 +576,10 @@ int max9296_sdev_unregister(struct device *dev, struct device *s_dev)
 	}
 	priv->num_src--;
 
+    priv->settings_setup = false;
+
+    priv->paired = false;
+
 error:
 	mutex_unlock(&priv->lock);
 	return err;
@@ -967,24 +1010,33 @@ int max9296_init_settings(struct device *dev)
 		{0x02CC, 0x1B},
 	};
 
-	mutex_lock(&priv->lock);
+    if(!priv){
+        dev_err(dev, "Couldn't get drvdata");
+        err = -EINVAL;
+        goto err;
+    }
 
-	if(priv->init_flag == false){
-		for (i = 0; i < MAX9296_MAX_PIPES; i++)
-			err |= __max9296_set_pipe(dev, i, GMSL_CSI_DT_YUV422_8,
-						GMSL_CSI_DT_EMBED, i);
-		priv->init_flag = true;
-	}
+    mutex_lock(&priv->lock);
 
-	// Trigger Depth
-	err |= max9296_set_registers(dev, map_depth_trigger,
-				     ARRAY_SIZE(map_depth_trigger));
-	// Trigger RGB
-	err |= max9296_set_registers(dev, map_rgb_trigger,
-				     ARRAY_SIZE(map_rgb_trigger));
+    if(!priv->settings_setup){
 
-	mutex_unlock(&priv->lock);
+        for (i = 0; i < MAX9296_MAX_PIPES; i++){
+            err |= __max9296_set_pipe(dev, i, GMSL_CSI_DT_YUV422_8,
+                        GMSL_CSI_DT_EMBED, i);
+        }
+
+        // Trigger Depth
+        err |= max9296_set_registers(dev, map_depth_trigger,
+                         ARRAY_SIZE(map_depth_trigger));
+        // Trigger RGB
+        err |= max9296_set_registers(dev, map_rgb_trigger,
+                         ARRAY_SIZE(map_rgb_trigger));
+
+        priv->settings_setup = true;
+    }
 
+    mutex_unlock(&priv->lock);
+err:
 	return err;
 }
 EXPORT_SYMBOL(max9296_init_settings);
-- 
2.46.1

