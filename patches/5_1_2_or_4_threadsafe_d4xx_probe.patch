diff --git a/hardware/nvidia/platform/t23x/concord/kernel-dts/cvb/tegra234-p3737-0000-camera-d4xx-qual.dtsi b/hardware/nvidia/platform/t23x/concord/kernel-dts/cvb/tegra234-p3737-0000-camera-d4xx-qual.dtsi
index 2cc5e5f..5375712 100644
--- a/hardware/nvidia/platform/t23x/concord/kernel-dts/cvb/tegra234-p3737-0000-camera-d4xx-qual.dtsi
+++ b/hardware/nvidia/platform/t23x/concord/kernel-dts/cvb/tegra234-p3737-0000-camera-d4xx-qual.dtsi
@@ -232,20 +232,22 @@
 				ser0_prim: max9295_prim@40 {
 					status = "ok";
 					reg = <0x40>;
-					compatible = "maxim,max9295_0";
+					compatible = "maxim,max9295";
 					is-prim-ser;
 				};
 
 				ser0_a: max9295_a@42 {
-					compatible = "maxim,max9295_0";
+					compatible = "maxim,max9295";
 					reg = <0x42>;
 					maxim,gmsl-dser-device = <&dser0>;
+                    prim-ser = <&ser0_prim>;
 				};
 
 				ser0_b: max9295_b@60 {
-					compatible = "maxim,max9295_0";
+					compatible = "maxim,max9295";
 					reg = <0x60>;
 					maxim,gmsl-dser-device = <&dser0>;
+                    prim-ser = <&ser0_prim>;
 				};
 
 				d4m0_depth: d4m0_depth@0a {
@@ -253,11 +255,12 @@
 					def-addr = <0x10>;
 					def-d4m-addr = <0x1a>;
 					reg = <0x0a>;
-					compatible = "intel,d4xx_0";
+					compatible = "intel,d4xx";
 					vcc-supply = <&p3737_vdd_1v8_sys>;
 					cam-type = "Depth";
 					maxim,gmsl-ser-device = <&ser0_a>;
 					maxim,gmsl-dser-device = <&dser0>;
+                    is-prim-d4m;
 					ports {
 						#address-cells = <1>;
 						#size-cells = <0>;
@@ -299,11 +302,12 @@
 					def-addr = <0x10>;
 					def-d4m-addr = <0x1a>;
 					reg = <0x0c>;
-					compatible = "intel,d4xx_0";
+					compatible = "intel,d4xx";
 					vcc-supply = <&p3737_vdd_1v8_sys>;
 					cam-type = "Y8";
 					maxim,gmsl-ser-device = <&ser0_a>;
 					maxim,gmsl-dser-device = <&dser0>;
+                    prim-d4m = <&d4m0_depth>;
 					ports {
 						#address-cells = <1>;
 						#size-cells = <0>;
@@ -346,11 +350,12 @@
 					def-addr = <0x10>;
 					def-d4m-addr = <0x1b>;
 					reg = <0x2a>;
-					compatible = "intel,d4xx_1";
+					compatible = "intel,d4xx";
 					vcc-supply = <&p3737_vdd_1v8_sys>;
 					cam-type = "Depth";
 					maxim,gmsl-ser-device = <&ser0_b>;
 					maxim,gmsl-dser-device = <&dser0>;
+                    is-prim-d4m;
 					ports {
 						#address-cells = <1>;
 						#size-cells = <0>;
@@ -392,11 +397,12 @@
 					def-addr = <0x10>;
 					def-d4m-addr = <0x1b>;
 					reg = <0x2c>;
-					compatible = "intel,d4xx_1";
+					compatible = "intel,d4xx";
 					vcc-supply = <&p3737_vdd_1v8_sys>;
 					cam-type = "Y8";
 					maxim,gmsl-ser-device = <&ser0_b>;
 					maxim,gmsl-dser-device = <&dser0>;
+                    prim-d4m = <&d4m1_depth>;
 					ports {
 						#address-cells = <1>;
 						#size-cells = <0>;
@@ -453,20 +459,22 @@
 				ser1_prim: max9295_prim@40 {
 					status = "ok";
 					reg = <0x40>;
-					compatible = "maxim,max9295_1";
-					is-prim-ser;
+					compatible = "maxim,max9295";
+                    is-prim-ser;
 				};
 
 				ser1_a: max9295_a@42 {
-					compatible = "maxim,max9295_1";
-					reg = <0x42>;
+					compatible = "maxim,max9295";
+                    reg = <0x42>;
 					maxim,gmsl-dser-device = <&dser1>;
+                    prim-ser = <&ser1_prim>;
 				};
 
 				ser1_b: max9295_b@60 {
-					compatible = "maxim,max9295_1";
+					compatible = "maxim,max9295";
 					reg = <0x60>;
 					maxim,gmsl-dser-device = <&dser1>;
+                    prim-ser = <&ser1_prim>;
 				};
 
 				d4m2_depth: d4m2_depth@0a {
@@ -474,11 +482,12 @@
 					def-addr = <0x10>;
 					def-d4m-addr = <0x1c>;
 					reg = <0x0a>;
-					compatible = "intel,d4xx_2";
+					compatible = "intel,d4xx";
 					vcc-supply = <&p3737_vdd_1v8_sys>;
 					cam-type = "Depth";
 					maxim,gmsl-ser-device = <&ser1_a>;
 					maxim,gmsl-dser-device = <&dser1>;
+                    is-prim-d4m;
 					ports {
 						#address-cells = <1>;
 						#size-cells = <0>;
@@ -519,11 +528,12 @@
 					def-addr = <0x10>;
 					def-d4m-addr = <0x1c>;
 					reg = <0x0c>;
-					compatible = "intel,d4xx_2";
+					compatible = "intel,d4xx";
 					vcc-supply = <&p3737_vdd_1v8_sys>;
 					cam-type = "Y8";
 					maxim,gmsl-ser-device = <&ser1_a>;
 					maxim,gmsl-dser-device = <&dser1>;
+                    prim-d4m = <&d4m2_depth>;
 					ports {
 						#address-cells = <1>;
 						#size-cells = <0>;
@@ -566,11 +576,12 @@
 					def-addr = <0x10>;
 					def-d4m-addr = <0x1d>;
 					reg = <0x2a>;
-					compatible = "intel,d4xx_3";
+					compatible = "intel,d4xx";
 					vcc-supply = <&p3737_vdd_1v8_sys>;
 					cam-type = "Depth";
 					maxim,gmsl-ser-device = <&ser1_b>;
 					maxim,gmsl-dser-device = <&dser1>;
+                    is-prim-d4m;
 					ports {
 						#address-cells = <1>;
 						#size-cells = <0>;
@@ -612,11 +623,12 @@
 					def-addr = <0x10>;
 					def-d4m-addr = <0x1d>;
 					reg = <0x2c>;
-					compatible = "intel,d4xx_3";
+					compatible = "intel,d4xx";
 					vcc-supply = <&p3737_vdd_1v8_sys>;
 					cam-type = "Y8";
 					maxim,gmsl-ser-device = <&ser1_b>;
 					maxim,gmsl-dser-device = <&dser1>;
+                    prim-d4m = <&d4m3_depth>;
 					ports {
 						#address-cells = <1>;
 						#size-cells = <0>;
diff --git a/kernel/nvidia/drivers/media/i2c/d4xx.c b/kernel/nvidia/drivers/media/i2c/d4xx.c
index 0dcce1e..c12a1d6 100644
--- a/kernel/nvidia/drivers/media/i2c/d4xx.c
+++ b/kernel/nvidia/drivers/media/i2c/d4xx.c
@@ -469,7 +469,6 @@ struct ds5 {
 	const struct ds5_variant *variant;
 	int is_depth, is_y8, is_rgb, is_imu;
 	int aggregated;
-	int device_id;
 	u16 fw_version;
 	u16 fw_build;
 #ifdef CONFIG_VIDEO_D4XX_SERDES
@@ -478,6 +477,7 @@ struct ds5 {
 	struct device *dser_dev;
 	struct i2c_client *ser_i2c;
 	struct i2c_client *dser_i2c;
+	bool is_prim_d4m;
 #endif
 #ifdef CONFIG_VIDEO_INTEL_IPU6
 #define NR_OF_CSI2_BE_SOC_STREAMS	16
@@ -2916,6 +2916,9 @@ static int ds5_board_setup(struct ds5 *state)
 		goto error;
 	}
 
+	state->is_prim_d4m = of_get_property(node, "is-prim-d4m", NULL) ? true :
+									  false;
+
 	ser_node = of_parse_phandle(node, "maxim,gmsl-ser-device", 0);
 	if (ser_node == NULL) {
 		/* check compatibility with jetpack */
@@ -3043,16 +3046,6 @@ static int ds5_board_setup(struct ds5 *state)
 	state->g_ctx.num_csi_lanes = value;
 	state->g_ctx.s_dev = dev;
 
-	// for (i = 0; i < MAX_DEV_NUM; i++) {
-	// 	if (!serdes_inited[i]) {
-	// 		serdes_inited[i] = state;
-	// 		return 0;
-	// 	} else if (serdes_inited[i]->ser_dev == state->ser_dev) {
-	// 		return -ENOTSUPP;
-	// 	}
-	// }
-	// err = -EINVAL;
-	// dev_err(dev, "cannot handle more than %d D457 cameras\n", MAX_DEV_NUM);
 	return 0;
 error:
 	return err;
@@ -3250,8 +3243,9 @@ static int ds5_gmsl_serdes_setup(struct ds5 *state)
 	err = max9295_setup_control(state->ser_dev);
 
 	/* proceed even if ser setup failed, to setup deser correctly */
-	if (err)
+	if (err) {
 		dev_err(dev, "gmsl serializer setup failed\n");
+	}
 
 	des_err = max9296_setup_control(state->dser_dev, &state->client->dev);
 	if (des_err) {
@@ -3312,8 +3306,6 @@ static int ds5_i2c_addr_setting(struct i2c_client *c, struct ds5 *state)
 }
 #endif
 
-static int d4xx_gmsl_init_flag[4] = {0,0,0,0};
-
 static int ds5_serdes_setup(struct ds5 *state)
 {
 	int ret = 0;
@@ -3343,15 +3335,10 @@ static int ds5_serdes_setup(struct ds5 *state)
 			return ret;
 		}
 	}
-#endif
-	ret = ds5_board_setup(state);
-	if (ret) {
-		dev_err(&c->dev, "board setup failed\n");
-		return ret;
-	}
+#endif //CONFIG_VIDEO_INTEL_IPU6
 
-	if(d4xx_gmsl_init_flag[state->device_id] == 0){
-		/* Pair sensor to serializer dev */
+	/* Pair sensor to serializer dev */
+	if (state->is_prim_d4m) {
 		ret = max9295_sdev_pair(state->ser_dev, &state->g_ctx);
 		if (ret) {
 			dev_err(&c->dev, "gmsl ser pairing failed\n");
@@ -3362,42 +3349,31 @@ static int ds5_serdes_setup(struct ds5 *state)
 		ret = max9296_sdev_register(state->dser_dev, &state->g_ctx);
 		if (ret) {
 			dev_err(&c->dev, "gmsl deserializer register failed\n");
-			return ret;
 		}
-		d4xx_gmsl_init_flag[state->device_id] = 1;
-	}
 
-	
-	if(d4xx_gmsl_init_flag[state->device_id] == 1){
 		ret = ds5_gmsl_serdes_setup(state);
 		if (ret) {
-			dev_err(&c->dev, "%s gmsl serdes setup failed, ret=%d\n", __func__, ret);
-			d4xx_gmsl_init_flag[state->device_id] = 3;
+			dev_err(&c->dev,
+				"%s gmsl serdes setup failed, ret=%d\n",
+				__func__, ret);
 			return ret;
 		}
 
 		ret = max9295_init_settings(state->ser_dev);
 		if (ret) {
-			dev_warn(&c->dev, "%s, failed to init max9295 settings\n",
-				__func__);
-			d4xx_gmsl_init_flag[state->device_id] = 3;
+			dev_warn(&c->dev,
+				 "%s, failed to init max9295 settings\n",
+				 __func__);
 			return ret;
 		}
 
 		ret = max9296_init_settings(state->dser_dev);
 		if (ret) {
-			dev_warn(&c->dev, "%s, failed to init max9296 settings\n",
-				__func__);
-			d4xx_gmsl_init_flag[state->device_id] = 4;
-			return ret;
+			dev_warn(&c->dev,
+				 "%s, failed to init max9296 settings\n",
+				 __func__);
 		}
-		d4xx_gmsl_init_flag[state->device_id] = 2;
-	}else if(d4xx_gmsl_init_flag[state->device_id] == 2){
-		return 0;
-	}else{
-		return -EINVAL;
 	}
-	
 	return ret;
 }
 #endif
@@ -5430,7 +5406,6 @@ static const struct attribute_group ds5_attr_group = {
 #ifdef CONFIG_VIDEO_INTEL_IPU6
 #define NR_DESER 4
 #endif //CONFIG_VIDEO_INTEL_IPU6
-struct regmap *cam_regmap[4];
 static int ds5_probe(struct i2c_client *c, const struct i2c_device_id *id)
 {
 	struct ds5 *state = devm_kzalloc(&c->dev, sizeof(*state), GFP_KERNEL);
@@ -5445,9 +5420,8 @@ static int ds5_probe(struct i2c_client *c, const struct i2c_device_id *id)
 	mutex_init(&state->lock);
 
 	state->client = c;
-	dev_warn(&c->dev, "Probing driver for D45x, id = %ld, name = %s\n", id->driver_data, id->name);
-	state->device_id = id->driver_data;
-	state->variant = ds5_variants + 0;//id->driver_data;
+	dev_warn(&c->dev, "Probing driver for D45x, name = %s\n", id->name);
+	state->variant = ds5_variants + id->driver_data;
 #ifdef CONFIG_OF
 	state->vcc = devm_regulator_get(&c->dev, "vcc");
 	if (IS_ERR(state->vcc)) {
@@ -5464,6 +5438,8 @@ static int ds5_probe(struct i2c_client *c, const struct i2c_device_id *id)
 		}
 	}
 #endif
+
+#ifdef CONFIG_VIDEO_D4XX_SERDES
 	err = of_property_read_u32(c->dev.of_node, "def-d4m-addr", &state->g_ctx.sdev_reg);
 	if (err < 0)
 	{
@@ -5474,18 +5450,23 @@ static int ds5_probe(struct i2c_client *c, const struct i2c_device_id *id)
 		state->client->addr = state->g_ctx.sdev_reg;
 	}
 
-	if(cam_regmap[id->driver_data] == NULL){
-		cam_regmap[id->driver_data] = devm_regmap_init_i2c(c, &ds5_regmap_config);
-		if (IS_ERR(cam_regmap[id->driver_data])) {
-			ret = PTR_ERR(cam_regmap[id->driver_data]);
-			dev_err(&c->dev, "regmap init failed: %d\n", ret);
-			goto e_regulator;
-		}
+	ret = ds5_board_setup(state);
+	if (ret) {
+		dev_err(&c->dev, "board setup failed\n");
+		goto e_regulator;
+	}
+
+	state->regmap = max9295_sensor_regmap_init(state->ser_dev, c,
+						   &ds5_regmap_config);
+	if (!state->ser_dev) {
+		ret = -EPROBE_DEFER;
+		goto e_regulator;
+	}
+
+	if (state->regmap == NULL) {
+		goto e_regulator;
 	}
-	
-	state->regmap = cam_regmap[id->driver_data];
 
-#ifdef CONFIG_VIDEO_D4XX_SERDES
 	ret = ds5_serdes_setup(state);
 	if (ret < 0)
 		goto e_regulator;
@@ -5626,12 +5607,11 @@ static int ds5_remove(struct i2c_client *c)
 			mutex_unlock(&serdes_lock__);
 			//break;
 		}
-	//}
-	d4xx_gmsl_init_flag[state->device_id] = false;
-	if (state->ser_i2c)
-		i2c_unregister_device(state->ser_i2c);
-	if (state->dser_i2c)
-		i2c_unregister_device(state->dser_i2c);
+		//}
+		if (state->ser_i2c)
+			i2c_unregister_device(state->ser_i2c);
+		if (state->dser_i2c)
+			i2c_unregister_device(state->dser_i2c);
 #endif
 #ifndef CONFIG_TEGRA_CAMERA_PLATFORM
 	state->is_depth = 1;
@@ -5659,11 +5639,8 @@ static const struct i2c_device_id ds5_id[] = {
 	// { DS5_DRIVER_NAME, DS5_DS5U },
 	// { DS5_DRIVER_NAME_ASR, DS5_ASR },
 	// { DS5_DRIVER_NAME_AWG, DS5_AWG },
-	{ "d4xx_0", 0 },
-	{ "d4xx_1", 1 },
-	{ "d4xx_2", 2 },
-	{ "d4xx_3", 3 },
-	{ },
+	{ "d4xx", 0 },
+	{},
 };
 MODULE_DEVICE_TABLE(i2c, ds5_id);
 
@@ -5694,7 +5671,8 @@ MODULE_AUTHOR("Guennadi Liakhovetski <guennadi.liakhovetski@intel.com>,\n\
 				Qingwu Zhang <qingwu.zhang@intel.com>,\n\
 				Evgeni Raikhel <evgeni.raikhel@intel.com>,\n\
 				Shikun Ding <shikun.ding@intel.com>,\n\
- 				Ethan chen <chenxinhai@sensing-world.com>");
+				Ethan chen <chenxinhai@sensing-world.com>,\n\
+                Alex Hoffman <alxhoff@cartken.com>");
 MODULE_AUTHOR("Dmitry Perchanov <dmitry.perchanov@intel.com>");
 MODULE_LICENSE("GPL v2");
 MODULE_VERSION("1.0.1.21");
diff --git a/kernel/nvidia/drivers/media/i2c/max9295.c b/kernel/nvidia/drivers/media/i2c/max9295.c
index 0e6ff80..695a1d6 100644
--- a/kernel/nvidia/drivers/media/i2c/max9295.c
+++ b/kernel/nvidia/drivers/media/i2c/max9295.c
@@ -106,15 +106,15 @@ struct max9295_client_ctx {
 struct max9295 {
 	struct i2c_client *i2c_client;
 	struct regmap *regmap;
+	struct regmap *sensor_regmap;
 	struct max9295_client_ctx g_client;
 	struct mutex lock;
 	/* primary serializer properties */
 	__u32 def_addr;
 	__u32 pst2_ref;
-	u8 prim_id;
-};
 
-static struct max9295 *prim_priv__[4];
+	struct max9295 *prim_priv;
+};
 
 struct map_ctx {
 	u8 dt;
@@ -123,6 +123,39 @@ struct map_ctx {
 	u8 st_id;
 };
 
+struct regmap *max9295_sensor_regmap_init(struct device *dev,
+					  struct i2c_client *c,
+					  const struct regmap_config *rm_config)
+{
+	struct max9295 *priv;
+	struct regmap *ret;
+
+	if (!c || !dev || !rm_config)
+		return NULL;
+
+	priv = dev_get_drvdata(dev);
+
+	if (!priv)
+		return NULL;
+
+	mutex_lock(&priv->lock);
+
+	if (priv->sensor_regmap)
+		goto ret;
+
+	priv->sensor_regmap = devm_regmap_init_i2c(c, rm_config);
+	if (IS_ERR(priv->sensor_regmap))
+		dev_err(dev, "regmap init failed: %ld\n",
+			PTR_ERR(priv->sensor_regmap));
+
+ret:
+	ret = priv->sensor_regmap;
+	mutex_unlock(&priv->lock);
+
+	return ret;
+}
+EXPORT_SYMBOL(max9295_sensor_regmap_init);
+
 static int max9295_write_reg(struct device *dev, u16 addr, u8 val)
 {
 	struct max9295 *priv = dev_get_drvdata(dev);
@@ -304,7 +337,10 @@ int max9295_setup_control(struct device *dev)
 		0xC4, 0x02, 0x03,
 	};
 
-	mutex_lock(&priv->lock);
+	if (!dev || !priv)
+		return -EINVAL;
+
+	mutex_lock(&priv->prim_priv->lock);
 
 	if (!priv->g_client.g_ctx) {
 		dev_err(dev, "%s: no sensor dev client found\n", __func__);
@@ -314,11 +350,9 @@ int max9295_setup_control(struct device *dev)
 
 	g_ctx = priv->g_client.g_ctx;
 
-	if (prim_priv__[priv->prim_id]) {
-		/* update address reassingment */
-		max9295_write_reg(&prim_priv__[priv->prim_id]->i2c_client->dev,
-				MAX9295_DEV_ADDR, (g_ctx->ser_reg << 1));
-	}
+	/* update address reassingment */
+	max9295_write_reg(&priv->prim_priv->i2c_client->dev, MAX9295_DEV_ADDR,
+			  (g_ctx->ser_reg << 1));
 
 	if (g_ctx->serdes_csi_link == GMSL_SERDES_CSI_LINK_A)
 		err = max9295_write_reg(dev, MAX9295_CTRL0_ADDR, 0x21);
@@ -353,16 +387,12 @@ int max9295_setup_control(struct device *dev)
 		i2c_ovrd[i+1] += (i < 4) ? offset1 : offset2;
 
 		/* i2c passthrough2 must be configured once for all devices */
-		if ((i2c_ovrd[i] == 0x8B) && prim_priv__[priv->prim_id] &&
-				prim_priv__[priv->prim_id]->pst2_ref)
+		if ((i2c_ovrd[i] == 0x8B) && priv->prim_priv->pst2_ref) 
 			continue;
-
 		max9295_write_reg(dev, i2c_ovrd[i], i2c_ovrd[i+1]);
 	}
 
-	/* dev addr pass-through2 ref */
-	if (prim_priv__[priv->prim_id])
-		prim_priv__[priv->prim_id]->pst2_ref++;
+	priv->prim_priv->pst2_ref++;
 
 	max9295_write_reg(dev, MAX9295_I2C4_ADDR, (g_ctx->sdev_reg << 1));
 	max9295_write_reg(dev, MAX9295_I2C5_ADDR, (g_ctx->sdev_def << 1));
@@ -374,7 +404,7 @@ int max9295_setup_control(struct device *dev)
 	g_ctx->serdev_found = true;
 
 error:
-	mutex_unlock(&priv->lock);
+	mutex_unlock(&priv->prim_priv->lock);
 	return err;
 }
 EXPORT_SYMBOL(max9295_setup_control);
@@ -384,6 +414,12 @@ int max9295_reset_control(struct device *dev)
 	struct max9295 *priv = dev_get_drvdata(dev);
 	int err = 0;
 
+	if (!priv) {
+		dev_err(dev, "Couldn't get drvdata");
+		err = -EINVAL;
+		goto ret;
+	}
+
 	mutex_lock(&priv->lock);
 	if (!priv->g_client.g_ctx) {
 		dev_err(dev, "%s: no sdev client found\n", __func__);
@@ -393,19 +429,26 @@ int max9295_reset_control(struct device *dev)
 
 	priv->g_client.st_done = false;
 
-	if (prim_priv__[priv->prim_id]) {
-		prim_priv__[priv->prim_id]->pst2_ref--;
+	if (!priv->prim_priv) {
+		dev_err(dev, "%s prim_priv doesn't exist\n", __func__);
+		goto error;
+	}
 
-		max9295_write_reg(dev, MAX9295_DEV_ADDR,
-					(prim_priv__[priv->prim_id]->def_addr << 1));
-		if (prim_priv__[priv->prim_id]->pst2_ref == 0){
-			max9295_write_reg(&prim_priv__[priv->prim_id]->i2c_client->dev,
-						MAX9295_CTRL0_ADDR, MAX9295_RESET_ALL);
-		}	
+	mutex_lock(&priv->prim_priv->lock);
+
+	priv->prim_priv->pst2_ref--;
+	max9295_write_reg(dev, MAX9295_DEV_ADDR,
+			  (priv->prim_priv->def_addr << 1));
+	if (priv->prim_priv->pst2_ref == 0) {
+		max9295_write_reg(&priv->prim_priv->i2c_client->dev,
+				  MAX9295_CTRL0_ADDR, MAX9295_RESET_ALL);
 	}
 
+	mutex_unlock(&priv->prim_priv->lock);
+
 error:
 	mutex_unlock(&priv->lock);
+ret:
 	return err;
 }
 EXPORT_SYMBOL(max9295_reset_control);
@@ -413,7 +456,6 @@ EXPORT_SYMBOL(max9295_reset_control);
 int max9295_sdev_pair(struct device *dev, struct gmsl_link_ctx *g_ctx)
 {
 	struct max9295 *priv;
-	int err = 0;
 
 	if (!dev || !g_ctx || !g_ctx->s_dev) {
 		dev_err(dev, "%s: invalid input params\n", __func__);
@@ -421,10 +463,14 @@ int max9295_sdev_pair(struct device *dev, struct gmsl_link_ctx *g_ctx)
 	}
 
 	priv = dev_get_drvdata(dev);
+
+	if (!priv)
+		return -EINVAL;
+
 	mutex_lock(&priv->lock);
+
 	if (priv->g_client.g_ctx) {
-		dev_err(dev, "%s: device already paired\n", __func__);
-		err = -EINVAL;
+		dev_err(dev, "%s: device already ser_paired\n", __func__);
 		goto error;
 	}
 
@@ -592,6 +638,10 @@ int max9295_init_settings(struct device *dev)
 		{0x02C0, 0x1B},
 	};
 
+	if (!priv) {
+		goto ret;
+	}
+
 	mutex_lock(&priv->lock);
 	
 	// Init control
@@ -610,7 +660,7 @@ int max9295_init_settings(struct device *dev)
 				     ARRAY_SIZE(map_rgb_trigger));
 
 	mutex_unlock(&priv->lock);
-
+ret:
 	return err;
 }
 EXPORT_SYMBOL(max9295_init_settings);
@@ -646,10 +696,15 @@ static int max9295_probe(struct i2c_client *client,
 	struct max9295 *priv;
 	int err = 0;
 	struct device_node *node = client->dev.of_node;
+	struct device_node *prim_node;
+	struct i2c_client *prim_client;
 
 	dev_info(&client->dev, "[MAX9295]: probing GMSL Serializer\n");
 
 	priv = devm_kzalloc(&client->dev, sizeof(*priv), GFP_KERNEL);
+    if (!priv){
+        return -EINVAL;
+    }
 	priv->i2c_client = client;
 	priv->regmap = devm_regmap_init_i2c(priv->i2c_client,
 				&max9295_regmap_config);
@@ -660,21 +715,32 @@ static int max9295_probe(struct i2c_client *client,
 	}
 
 	mutex_init(&priv->lock);
-	priv->prim_id = id->driver_data;
-	if (of_get_property(node, "is-prim-ser", NULL)) {
-		if (prim_priv__[priv->prim_id]) {
-			dev_err(&client->dev,
-				"prim-ser already exists\n");
-				return -EEXIST;
-		}
 
+	//primary specific init
+	if (of_get_property(node, "is-prim-ser", NULL)) {
 		err = of_property_read_u32(node, "reg", &priv->def_addr);
 		if (err < 0) {
 			dev_err(&client->dev, "reg not found\n");
 			return -EINVAL;
 		}
 
-		prim_priv__[priv->prim_id] = priv;
+	} else { //non-primary specific init
+		prim_node = of_parse_phandle(node, "prim-ser", 0);
+		if (!prim_node) {
+			dev_err(&client->dev,
+				"Failed to get primary serializer phandle");
+			return -EINVAL;
+		}
+
+		prim_client = of_find_i2c_device_by_node(prim_node);
+		of_node_put(prim_node);
+		if (!prim_client) {
+			dev_err(&client->dev,
+				"Failed to get primary i2c client");
+			return -EPROBE_DEFER; // Try again later
+		}
+
+		priv->prim_priv = i2c_get_clientdata(prim_client);
 	}
 
 	dev_set_drvdata(&client->dev, priv);
@@ -700,9 +766,8 @@ static int max9295_remove(struct i2c_client *client)
 }
 
 static const struct i2c_device_id max9295_id[] = {
-	{ "max9295_0", 0 },
-	{ "max9295_1", 1 },
-	{ },
+	{ "max9295", 0 },
+	{},
 };
 
 static const struct of_device_id max9295_of_match[] = {
@@ -737,4 +802,5 @@ module_exit(max9295_exit);
 
 MODULE_DESCRIPTION("GMSL Serializer driver max9295");
 MODULE_AUTHOR("Sudhir Vyas <svyas@nvidia.com>");
+MODULE_AUTHOR("Alex Hoffman <alxhoff@cartken.com>");
 MODULE_LICENSE("GPL v2");
diff --git a/kernel/nvidia/drivers/media/i2c/max9296.c b/kernel/nvidia/drivers/media/i2c/max9296.c
index e0e1b86..d2b4720 100644
--- a/kernel/nvidia/drivers/media/i2c/max9296.c
+++ b/kernel/nvidia/drivers/media/i2c/max9296.c
@@ -125,7 +125,6 @@ struct max9296 {
 	u8 lane_mp2;
 	int reset_gpio;
 	int pw_ref;
-	int init_flag;
 	struct regulator *vdd_cam_1v2;
 };
 
@@ -228,7 +227,6 @@ static void max9296_reset_ctx(struct max9296 *priv)
 	priv->num_src_found = 0;
 	priv->src_link = 0;
 	priv->splitter_enabled = false;
-	priv->init_flag = false;
 	max9296_pipes_reset(priv);
 	for (i = 0; i < priv->num_src; i++)
 		priv->sources[i].st_enabled = false;
@@ -353,6 +351,11 @@ int max9296_setup_control(struct device *dev, struct device *s_dev)
 	int err = 0;
 	unsigned int i = 0;
 
+	if (!priv) {
+		dev_err(dev, "Couldn't get drvdata");
+		return -EINVAL;
+	}
+
 	err = max9296_get_sdev_idx(dev, s_dev, &i);
 	if (err)
 		return err;
@@ -383,16 +386,14 @@ int max9296_setup_control(struct device *dev, struct device *s_dev)
 		msleep(100);
 	}
 
-	max9296_write_reg(dev,
-			MAX9296_PWDN_PHYS_ADDR, MAX9296_ALLPHYS_NOSTDBY);
+	max9296_write_reg(dev, MAX9296_PWDN_PHYS_ADDR, MAX9296_ALLPHYS_NOSTDBY);
 
 	priv->sdev_ref++;
 
 	/* Reset splitter mode if all devices are not found */
 	if ((priv->sdev_ref == priv->max_src) &&
-		(priv->splitter_enabled == true) &&
-		(priv->num_src_found > 0U) &&
-		(priv->num_src_found < priv->max_src)) {
+	    (priv->splitter_enabled == true) && (priv->num_src_found > 0U) &&
+	    (priv->num_src_found < priv->max_src)) {
 		err = max9296_write_link(dev, priv->src_link);
 		if (err)
 			goto error;
@@ -411,10 +412,16 @@ int max9296_reset_control(struct device *dev, struct device *s_dev)
 	struct max9296 *priv = dev_get_drvdata(dev);
 	int err = 0;
 
+	if (!priv) {
+		dev_err(dev, "Couldn't get drvdata\n");
+		err = -EINVAL;
+		goto ret;
+	}
+
 	mutex_lock(&priv->lock);
 	if (!priv->sdev_ref) {
 		dev_info(dev, "%s: dev is already in reset state\n", __func__);
-		goto ret;
+		goto unlock;
 	}
 
 	priv->sdev_ref--;
@@ -422,13 +429,15 @@ int max9296_reset_control(struct device *dev, struct device *s_dev)
 		max9296_reset_ctx(priv);
 		max9296_write_reg(dev, MAX9296_CTRL0_ADDR, MAX9296_RESET_ALL);
 
+		mutex_unlock(&priv->lock);
 		/* delay to settle reset */
 		msleep(100);
+		goto ret;
 	}
 
-ret:
+unlock:
 	mutex_unlock(&priv->lock);
-
+ret:
 	return err;
 }
 EXPORT_SYMBOL(max9296_reset_control);
@@ -951,7 +960,6 @@ int max9296_init_settings(struct device *dev)
 {
 	int err = 0;
 	int i;
-	struct max9296 *priv = dev_get_drvdata(dev);
 
 	static struct reg_pair map_depth_trigger[] = {
 		// For GMSL_10CH_first board (isx031 and d457 use one trig gpio)
@@ -967,13 +975,9 @@ int max9296_init_settings(struct device *dev)
 		{0x02CC, 0x1B},
 	};
 
-	mutex_lock(&priv->lock);
-
-	if(priv->init_flag == false){
-		for (i = 0; i < MAX9296_MAX_PIPES; i++)
-			err |= __max9296_set_pipe(dev, i, GMSL_CSI_DT_YUV422_8,
-						GMSL_CSI_DT_EMBED, i);
-		priv->init_flag = true;
+	for (i = 0; i < MAX9296_MAX_PIPES; i++) {
+		err |= __max9296_set_pipe(dev, i, GMSL_CSI_DT_YUV422_8,
+					  GMSL_CSI_DT_EMBED, i);
 	}
 
 	// Trigger Depth
@@ -983,8 +987,6 @@ int max9296_init_settings(struct device *dev)
 	err |= max9296_set_registers(dev, map_rgb_trigger,
 				     ARRAY_SIZE(map_rgb_trigger));
 
-	mutex_unlock(&priv->lock);
-
 	return err;
 }
 EXPORT_SYMBOL(max9296_init_settings);
diff --git a/kernel/nvidia/include/media/max9295.h b/kernel/nvidia/include/media/max9295.h
index bea15c4..ed5965d 100644
--- a/kernel/nvidia/include/media/max9295.h
+++ b/kernel/nvidia/include/media/max9295.h
@@ -27,6 +27,7 @@
 
 #include <linux/types.h>
 #include <media/gmsl-link.h>
+#include <linux/regmap.h>
 /**
  * \defgroup max9295 MAX9295 serializer driver
  *
@@ -39,6 +40,19 @@
 int max9295_set_pipe(struct device *dev, int pipe_id, u8 data_type1,
 		     u8 data_type2, u32 vc_id);
 
+/**
+ * @brief  Creates regmap shared by all attached ds5 devices
+ *
+ * @param  [in]  dev            The serializer device handle.
+ * @param  [in]  c              i2c client dev
+ * @param  [in]  rm_config      Regmap config to be used for the d4xx device
+ *
+ * @return Pointer to regmap, NULL on error
+ */
+struct regmap *
+max9295_sensor_regmap_init(struct device *dev, struct i2c_client *c,
+			   const struct regmap_config *rm_config);
+
 /**
  * @brief  Powers on a serializer device and performs the I2C overrides
  * for sensor and serializer devices.
