diff --git a/kernel/nvidia/drivers/media/i2c/d4xx.c b/kernel/nvidia/drivers/media/i2c/d4xx.c
index 7b58abe6b..578f8650f 100644
--- a/kernel/nvidia/drivers/media/i2c/d4xx.c
+++ b/kernel/nvidia/drivers/media/i2c/d4xx.c
@@ -477,6 +477,7 @@ struct ds5 {
 	struct device *dser_dev;
 	struct i2c_client *ser_i2c;
 	struct i2c_client *dser_i2c;
+	bool is_prim_d4m;
 #endif
 #ifdef CONFIG_VIDEO_INTEL_IPU6
 #define NR_OF_CSI2_BE_SOC_STREAMS	16
@@ -2364,17 +2365,23 @@ static int ds5_g_volatile_ctrl(struct v4l2_ctrl *ctrl)
 	dev_dbg(&state->client->dev, "%s(): %s - ctrl: %s \n",
 		__func__, ds5_get_sensor_name(state), ctrl->name);
 
+	mutex_lock(&state->lock);
+
 	switch (ctrl->id) {
 
 	case V4L2_CID_ANALOGUE_GAIN:
-		if (state->is_imu)
-			return -EINVAL;
+		if (state->is_imu) {
+			ret = -EINVAL;
+			break;
+		}
 		ret = ds5_read(state, base | DS5_MANUAL_GAIN, ctrl->p_new.p_u16);
 		break;
 
 	case V4L2_CID_EXPOSURE_AUTO:
-		if (state->is_imu)
-			return -EINVAL;
+		if (state->is_imu) {
+			ret = -EINVAL;
+			break;
+		}
 		ds5_read(state, base | DS5_AUTO_EXPOSURE_MODE, &reg);
 		*ctrl->p_new.p_u16 = reg;
 		/* see ds5_hw_set_auto_exposure */
@@ -2391,8 +2398,10 @@ static int ds5_g_volatile_ctrl(struct v4l2_ctrl *ctrl)
 		break;
 
 	case V4L2_CID_EXPOSURE_ABSOLUTE:
-		if (state->is_imu)
-			return -EINVAL;
+		if (state->is_imu) {
+			ret = -EINVAL;
+			break;
+		}
 		/* see ds5_hw_set_exposure */
 		ds5_read(state, base | DS5_MANUAL_EXPOSURE_MSB, &reg);
 		data = ((u32)reg << 16) & 0xffff0000;
@@ -2420,12 +2429,12 @@ static int ds5_g_volatile_ctrl(struct v4l2_ctrl *ctrl)
 		ret = regmap_raw_write(state->regmap, 0x4900,
 				log_prepare, sizeof(log_prepare));
 		if (ret < 0)
-			return ret;
+			break;
 
 		ret = regmap_raw_write(state->regmap, 0x490C,
 				&execute_cmd, sizeof(execute_cmd));
 		if (ret < 0)
-			return ret;
+			break;
 
 		for (i = 0; i < DS5_MAX_LOG_POLL; i++) {
 			ret = regmap_raw_read(state->regmap, 0x4904,
@@ -2433,9 +2442,11 @@ static int ds5_g_volatile_ctrl(struct v4l2_ctrl *ctrl)
 			dev_dbg(&state->client->dev, "%s(): log ready 0x%x\n",
 				 __func__, data);
 			if (ret < 0)
-				return ret;
-			if (!data)
 				break;
+			if (!data) {
+				ret = 0;
+				break;
+			}
 			msleep_range(5);
 		}
 
@@ -2445,11 +2456,15 @@ static int ds5_g_volatile_ctrl(struct v4l2_ctrl *ctrl)
 		ret = regmap_raw_read(state->regmap, 0x4908, &data, sizeof(data));
 		dev_dbg(&state->client->dev, "%s(): log size 0x%x\n", __func__, data);
 		if (ret < 0)
-			return ret;
-		if (!data)
-			return 0;
-		if (data > 1024)
-			return -ENOBUFS;
+			break;
+		if (!data) {
+			ret = 0;
+			break;
+		}
+		if (data > 1024) {
+			ret = -ENOBUFS;
+			break;
+		}
 		ret = regmap_raw_read(state->regmap, 0x4900,
 				ctrl->p_new.p_u8, data);
 		break;
@@ -2487,7 +2502,7 @@ static int ds5_g_volatile_ctrl(struct v4l2_ctrl *ctrl)
 			ret = ds5_send_hwmc(state, sizeof(struct hwm_cmd), ae_roi_cmd);
 			if (ret) {
 				devm_kfree(&state->client->dev, ae_roi_cmd);
-				return ret;
+				break;
 			}
 			ret = ds5_get_hwmc(state, ae_roi_cmd->Data, len, &dataLen);
 			if (!ret && dataLen <= ctrl->dims[0])
@@ -2512,7 +2527,7 @@ static int ds5_g_volatile_ctrl(struct v4l2_ctrl *ctrl)
 		ret = ds5_send_hwmc(state, sizeof(struct hwm_cmd), ae_setpoint_cmd);
 		if (ret) {		
 			devm_kfree(&state->client->dev, ae_setpoint_cmd);
-			return ret;
+			break;
 		}
 		ret = ds5_get_hwmc(state, ae_setpoint_cmd->Data, len, &dataLen);
 		memcpy(ctrl->p_new.p_s32, ae_setpoint_cmd->Data + 4, 4);
@@ -2560,6 +2575,7 @@ static int ds5_g_volatile_ctrl(struct v4l2_ctrl *ctrl)
 		break;
 #endif
 	}
+	mutex_unlock(&state->lock);
 	return ret;
 }
 
@@ -2887,12 +2903,6 @@ static int ds5_board_setup(struct ds5 *state)
 	int err;
 	int i;
 
-	err = of_property_read_u32(node, "reg", &state->g_ctx.sdev_reg);
-	if (err < 0) {
-		dev_err(dev, "reg not found\n");
-		goto error;
-	}
-
 	err = of_property_read_u32(node, "def-addr",
 					&state->g_ctx.sdev_def);
 	if (err < 0) {
@@ -2900,6 +2910,9 @@ static int ds5_board_setup(struct ds5 *state)
 		goto error;
 	}
 
+	state->is_prim_d4m = of_get_property(node, "is-prim-d4m", NULL) ? true :
+									  false;
+
 	ser_node = of_parse_phandle(node, "maxim,gmsl-ser-device", 0);
 	if (ser_node == NULL) {
 		/* check compatibility with jetpack */
@@ -3027,17 +3040,6 @@ static int ds5_board_setup(struct ds5 *state)
 	state->g_ctx.num_csi_lanes = value;
 	state->g_ctx.s_dev = dev;
 
-	for (i = 0; i < MAX_DEV_NUM; i++) {
-		if (!serdes_inited[i]) {
-			serdes_inited[i] = state;
-			return 0;
-		} else if (serdes_inited[i]->ser_dev == state->ser_dev) {
-			return -ENOTSUPP;
-		}
-	}
-	err = -EINVAL;
-	dev_err(dev, "cannot handle more than %d D457 cameras\n", MAX_DEV_NUM);
-
 error:
 	return err;
 }
@@ -3294,11 +3296,18 @@ static int ds5_i2c_addr_setting(struct i2c_client *c, struct ds5 *state)
 static int ds5_serdes_setup(struct ds5 *state)
 {
 	int ret = 0;
-	struct i2c_client *c = state->client;
+	struct i2c_client *c;
 #ifdef CONFIG_VIDEO_INTEL_IPU6
 	int i = 0, c_bus = 0;
 	int c_bus_new = c->adapter->nr;
+#endif
+	if (!state) {
+		dev_err(&c->dev, "%s unknown state\n", __func__);
+		return -EINVAL;
+	}
+	c = state->client;
 
+#ifdef CONFIG_VIDEO_INTEL_IPU6
 	for (i = 0; i < MAX_DEV_NUM; i++) {
 		if (serdes_inited[i] && serdes_inited[i]->dser_i2c) {
 			c_bus = serdes_inited[i]->dser_i2c->adapter->nr;
@@ -3321,48 +3330,44 @@ static int ds5_serdes_setup(struct ds5 *state)
 		}
 	}
 #endif
-	ret = ds5_board_setup(state);
-	if (ret) {
-		if (ret == -ENOTSUPP)
-			return 0;
-		dev_err(&c->dev, "board setup failed\n");
-		return ret;
-	}
 
 	/* Pair sensor to serializer dev */
-	ret = max9295_sdev_pair(state->ser_dev, &state->g_ctx);
-	if (ret) {
-		dev_err(&c->dev, "gmsl ser pairing failed\n");
-		return ret;
-	}
+	if (state->is_prim_d4m) {
+		ret = max9295_sdev_pair(state->ser_dev, &state->g_ctx);
+		if (ret) {
+			dev_err(&c->dev, "gmsl ser pairing failed\n");
+			return ret;
+		}
 
-	/* Register sensor to deserializer dev */
-	ret = max9296_sdev_register(state->dser_dev, &state->g_ctx);
-	if (ret) {
-		dev_err(&c->dev, "gmsl deserializer register failed\n");
-		return ret;
-	}
+		/* Register sensor to deserializer dev */
+		ret = max9296_sdev_register(state->dser_dev, &state->g_ctx);
+		if (ret) {
+			dev_err(&c->dev, "gmsl deserializer register failed\n");
+		}
 
-	ret = ds5_gmsl_serdes_setup(state);
-	if (ret) {
-		dev_err(&c->dev, "%s gmsl serdes setup failed\n", __func__);
-		return ret;
-	}
+		ret = ds5_gmsl_serdes_setup(state);
+		if (ret) {
+			dev_err(&c->dev,
+				"%s gmsl serdes setup failed, ret=%d\n",
+				__func__, ret);
+			return ret;
+		}
 
-	ret = max9295_init_settings(state->ser_dev);
-	if (ret) {
-		dev_warn(&c->dev, "%s, failed to init max9295 settings\n",
-			__func__);
-		return ret;
-	}
+		ret = max9295_init_settings(state->ser_dev);
+		if (ret) {
+			dev_warn(&c->dev,
+				 "%s, failed to init max9295 settings\n",
+				 __func__);
+			return ret;
+		}
 
-	ret = max9296_init_settings(state->dser_dev);
-	if (ret) {
-		dev_warn(&c->dev, "%s, failed to init max9296 settings\n",
-			__func__);
-		return ret;
+		ret = max9296_init_settings(state->dser_dev);
+		if (ret) {
+			dev_warn(&c->dev,
+				 "%s, failed to init max9296 settings\n",
+				 __func__);
+		}
 	}
-
 	return ret;
 }
 #endif
@@ -4174,6 +4179,8 @@ static int ds5_mux_s_stream(struct v4l2_subdev *sd, int on)
 	restore_val = sensor->streaming;
 	sensor->streaming = on;
 
+	mutex_lock(&state->lock);
+
 	if (on) {
 #ifdef CONFIG_VIDEO_D4XX_SERDES
 #ifdef CONFIG_VIDEO_INTEL_IPU6
@@ -4268,6 +4275,7 @@ static int ds5_mux_s_stream(struct v4l2_subdev *sd, int on)
 			(on)?"START":"STOP",
 			stream_status_base, streaming,
 			config_status_base, status, ret);
+	mutex_unlock(&state->lock);
 
 	return ret;
 
@@ -5448,15 +5456,34 @@ static int ds5_probe(struct i2c_client *c, const struct i2c_device_id *id)
 			return ret;
 		}
 	}
+
+	err = of_property_read_u32(c->dev.of_node, "def-d4m-addr",
+				   &state->g_ctx.sdev_reg);
+	if (err < 0) {
+		dev_err(&c->dev, "def-d4m-addr not found, but continue\n");
+	} else {
+		state->client->addr = state->g_ctx.sdev_reg;
+	}
 #endif
-	state->regmap = devm_regmap_init_i2c(c, &ds5_regmap_config);
-	if (IS_ERR(state->regmap)) {
-		ret = PTR_ERR(state->regmap);
-		dev_err(&c->dev, "regmap init failed: %d\n", ret);
+#ifdef CONFIG_VIDEO_D4XX_SERDES
+	ret = ds5_board_setup(state);
+	if (ret) {
+		if (ret == -ENOTSUPP)
+			return 0;
+		dev_err(&c->dev, "board setup failed\n");
+		return ret;
+	}
+
+	state->regmap = max9295_sensor_regmap_init(state->ser_dev, c,
+						   &ds5_regmap_config);
+	if (!state->ser_dev) {
+		ret = -EPROBE_DEFER;
 		goto e_regulator;
 	}
 
-#ifdef CONFIG_VIDEO_D4XX_SERDES
+	if (state->regmap == NULL) {
+		goto e_regulator;
+	}
 	ret = ds5_serdes_setup(state);
 	if (ret < 0)
 		goto e_regulator;
@@ -5572,35 +5599,29 @@ static int ds5_remove(struct i2c_client *c)
 	}
 
 #ifdef CONFIG_VIDEO_D4XX_SERDES
-	for (i = 0; i < MAX_DEV_NUM; i++) {
-		if (serdes_inited[i] && serdes_inited[i] == state) {
-			serdes_inited[i] = NULL;
-			mutex_lock(&serdes_lock__);
-
-			ret = max9295_reset_control(state->ser_dev);
-			if (ret)
-				dev_warn(&c->dev,
-				  "failed in 9295 reset control\n");
-			ret = max9296_reset_control(state->dser_dev,
-				state->g_ctx.s_dev);
-			if (ret)
-				dev_warn(&c->dev,
-				  "failed in 9296 reset control\n");
-
-			ret = max9295_sdev_unpair(state->ser_dev,
-				state->g_ctx.s_dev);
-			if (ret)
-				dev_warn(&c->dev, "failed to unpair sdev\n");
-			ret = max9296_sdev_unregister(state->dser_dev,
-				state->g_ctx.s_dev);
-			if (ret)
-				dev_warn(&c->dev,
-				  "failed to sdev unregister sdev\n");
-			max9296_power_off(state->dser_dev);
-
-			mutex_unlock(&serdes_lock__);
-			break;
-		}
+	if ((state->ser_dev != NULL) || (state->dser_dev != NULL)) {
+		mutex_lock(&serdes_lock__);
+
+		ret = max9295_reset_control(state->ser_dev);
+		if (ret)
+			dev_warn(&c->dev, "failed in 9295 reset control\n");
+		ret = max9296_reset_control(state->dser_dev,
+					    state->g_ctx.s_dev);
+		if (ret)
+			dev_warn(&c->dev, "failed in 9296 reset control\n");
+
+		ret = max9295_sdev_unpair(state->ser_dev, state->g_ctx.s_dev);
+		if (ret)
+			dev_warn(&c->dev, "failed to unpair sdev\n");
+		ret = max9296_sdev_unregister(state->dser_dev,
+					      state->g_ctx.s_dev);
+		if (ret)
+			dev_warn(&c->dev, "failed to sdev unregister sdev\n");
+		max9296_power_off(state->dser_dev);
+
+		mutex_unlock(&serdes_lock__);
+		break;
+	}
 	}
 	if (state->ser_i2c)
 		i2c_unregister_device(state->ser_i2c);
@@ -5665,7 +5686,8 @@ MODULE_AUTHOR("Guennadi Liakhovetski <guennadi.liakhovetski@intel.com>,\n\
 				Xin Zhang <xin.x.zhang@intel.com>,\n\
 				Qingwu Zhang <qingwu.zhang@intel.com>,\n\
 				Evgeni Raikhel <evgeni.raikhel@intel.com>,\n\
-				Shikun Ding <shikun.ding@intel.com>");
+				Shikun Ding <shikun.ding@intel.com>,\n\
+                Alex Hoffman <alxhoff@cartken.com>");
 MODULE_AUTHOR("Dmitry Perchanov <dmitry.perchanov@intel.com>");
 MODULE_LICENSE("GPL v2");
 MODULE_VERSION("1.0.1.25");
diff --git a/kernel/nvidia/drivers/media/i2c/max9295.c b/kernel/nvidia/drivers/media/i2c/max9295.c
index 6311d97d7..69296ac7f 100644
--- a/kernel/nvidia/drivers/media/i2c/max9295.c
+++ b/kernel/nvidia/drivers/media/i2c/max9295.c
@@ -106,14 +106,15 @@ struct max9295_client_ctx {
 struct max9295 {
 	struct i2c_client *i2c_client;
 	struct regmap *regmap;
+	struct regmap *sensor_regmap;
 	struct max9295_client_ctx g_client;
 	struct mutex lock;
 	/* primary serializer properties */
 	__u32 def_addr;
 	__u32 pst2_ref;
-};
 
-static struct max9295 *prim_priv__;
+	struct max9295 *prim_priv;
+};
 
 struct map_ctx {
 	u8 dt;
@@ -122,6 +123,39 @@ struct map_ctx {
 	u8 st_id;
 };
 
+struct regmap *max9295_sensor_regmap_init(struct device *dev,
+					  struct i2c_client *c,
+					  const struct regmap_config *rm_config)
+{
+	struct max9295 *priv;
+	struct regmap *ret;
+
+	if (!c || !dev || !rm_config)
+		return NULL;
+
+	priv = dev_get_drvdata(dev);
+
+	if (!priv)
+		return NULL;
+
+	mutex_lock(&priv->lock);
+
+	if (priv->sensor_regmap)
+		goto ret;
+
+	priv->sensor_regmap = devm_regmap_init_i2c(c, rm_config);
+	if (IS_ERR(priv->sensor_regmap))
+		dev_err(dev, "regmap init failed: %ld\n",
+			PTR_ERR(priv->sensor_regmap));
+
+ret:
+	ret = priv->sensor_regmap;
+	mutex_unlock(&priv->lock);
+
+	return ret;
+}
+EXPORT_SYMBOL(max9295_sensor_regmap_init);
+
 static int max9295_write_reg(struct device *dev, u16 addr, u8 val)
 {
 	struct max9295 *priv = dev_get_drvdata(dev);
@@ -301,7 +335,11 @@ int max9295_setup_control(struct device *dev)
 		0xC4, 0x02, 0x03,
 	};
 
+	if (!dev || !priv)
+		return -EINVAL;
+
 	mutex_lock(&priv->lock);
+	mutex_lock(&priv->prim_priv->lock);
 
 	if (!priv->g_client.g_ctx) {
 		dev_err(dev, "%s: no sensor dev client found\n", __func__);
@@ -311,11 +349,9 @@ int max9295_setup_control(struct device *dev)
 
 	g_ctx = priv->g_client.g_ctx;
 
-	if (prim_priv__) {
-		/* update address reassingment */
-		max9295_write_reg(&prim_priv__->i2c_client->dev,
-				MAX9295_DEV_ADDR, (g_ctx->ser_reg << 1));
-	}
+	/* update address reassingment */
+	max9295_write_reg(&priv->prim_priv->i2c_client->dev, MAX9295_DEV_ADDR,
+			  (g_ctx->ser_reg << 1));
 
 	if (g_ctx->serdes_csi_link == GMSL_SERDES_CSI_LINK_A)
 		err = max9295_write_reg(dev, MAX9295_CTRL0_ADDR, 0x21);
@@ -350,16 +386,12 @@ int max9295_setup_control(struct device *dev)
 		i2c_ovrd[i+1] += (i < 4) ? offset1 : offset2;
 
 		/* i2c passthrough2 must be configured once for all devices */
-		if ((i2c_ovrd[i] == 0x8B) && prim_priv__ &&
-				prim_priv__->pst2_ref)
+		if ((i2c_ovrd[i] == 0x8B) && priv->prim_priv->pst2_ref)
 			continue;
-
 		max9295_write_reg(dev, i2c_ovrd[i], i2c_ovrd[i+1]);
 	}
 
-	/* dev addr pass-through2 ref */
-	if (prim_priv__)
-		prim_priv__->pst2_ref++;
+	priv->prim_priv->pst2_ref++;
 
 	max9295_write_reg(dev, MAX9295_I2C4_ADDR, (g_ctx->sdev_reg << 1));
 	max9295_write_reg(dev, MAX9295_I2C5_ADDR, (g_ctx->sdev_def << 1));
@@ -371,6 +403,7 @@ int max9295_setup_control(struct device *dev)
 	g_ctx->serdev_found = true;
 
 error:
+	mutex_unlock(&priv->prim_priv->lock);
 	mutex_unlock(&priv->lock);
 	return err;
 }
@@ -381,6 +414,12 @@ int max9295_reset_control(struct device *dev)
 	struct max9295 *priv = dev_get_drvdata(dev);
 	int err = 0;
 
+	if (!priv) {
+		dev_err(dev, "Couldn't get drvdata");
+		err = -EINVAL;
+		goto ret;
+	}
+
 	mutex_lock(&priv->lock);
 	if (!priv->g_client.g_ctx) {
 		dev_err(dev, "%s: no sdev client found\n", __func__);
@@ -390,18 +429,25 @@ int max9295_reset_control(struct device *dev)
 
 	priv->g_client.st_done = false;
 
-	if (prim_priv__) {
-		prim_priv__->pst2_ref--;
+	if (!priv->prim_priv) {
+		dev_err(dev, "%s prim_priv doesn't exist\n", __func__);
+		goto error;
+	}
+
+	mutex_lock(&priv->prim_priv->lock);
 
-		max9295_write_reg(dev, MAX9295_DEV_ADDR,
-					(prim_priv__->def_addr << 1));
-		if (prim_priv__->pst2_ref == 0)
-			max9295_write_reg(&prim_priv__->i2c_client->dev,
-						MAX9295_CTRL0_ADDR, MAX9295_RESET_ALL);
+	priv->prim_priv->pst2_ref--;
+	max9295_write_reg(dev, MAX9295_DEV_ADDR,
+			  (priv->prim_priv->def_addr << 1));
+	if (priv->prim_priv->pst2_ref == 0) {
+		max9295_write_reg(&priv->prim_priv->i2c_client->dev,
+				  MAX9295_CTRL0_ADDR, MAX9295_RESET_ALL);
 	}
 
+	mutex_unlock(&priv->prim_priv->lock);
 error:
 	mutex_unlock(&priv->lock);
+ret:
 	return err;
 }
 EXPORT_SYMBOL(max9295_reset_control);
@@ -409,7 +455,6 @@ EXPORT_SYMBOL(max9295_reset_control);
 int max9295_sdev_pair(struct device *dev, struct gmsl_link_ctx *g_ctx)
 {
 	struct max9295 *priv;
-	int err = 0;
 
 	if (!dev || !g_ctx || !g_ctx->s_dev) {
 		dev_err(dev, "%s: invalid input params\n", __func__);
@@ -417,10 +462,14 @@ int max9295_sdev_pair(struct device *dev, struct gmsl_link_ctx *g_ctx)
 	}
 
 	priv = dev_get_drvdata(dev);
+
+	if (!priv)
+		return -EINVAL;
+
 	mutex_lock(&priv->lock);
+
 	if (priv->g_client.g_ctx) {
-		dev_err(dev, "%s: device already paired\n", __func__);
-		err = -EINVAL;
+		dev_err(dev, "%s: device already ser_paired\n", __func__);
 		goto error;
 	}
 
@@ -573,6 +622,10 @@ int max9295_init_settings(struct device *dev)
 		{MAX9295_START_PIPE_ADDR, 0xF0},
 	};
 
+	if (!priv) {
+		goto ret;
+	}
+
 	mutex_lock(&priv->lock);
 
 	// Init control
@@ -584,7 +637,7 @@ int max9295_init_settings(struct device *dev)
 					  GMSL_CSI_DT_EMBED, i);
 
 	mutex_unlock(&priv->lock);
-
+ret:
 	return err;
 }
 EXPORT_SYMBOL(max9295_init_settings);
@@ -620,10 +673,15 @@ static int max9295_probe(struct i2c_client *client,
 	struct max9295 *priv;
 	int err = 0;
 	struct device_node *node = client->dev.of_node;
+	struct device_node *prim_node;
+	struct i2c_client *prim_client;
 
 	dev_info(&client->dev, "[MAX9295]: probing GMSL Serializer\n");
 
 	priv = devm_kzalloc(&client->dev, sizeof(*priv), GFP_KERNEL);
+	if (!priv) {
+		return -EINVAL;
+	}
 	priv->i2c_client = client;
 	priv->regmap = devm_regmap_init_i2c(priv->i2c_client,
 				&max9295_regmap_config);
@@ -636,19 +694,29 @@ static int max9295_probe(struct i2c_client *client,
 	mutex_init(&priv->lock);
 
 	if (of_get_property(node, "is-prim-ser", NULL)) {
-		if (prim_priv__) {
-			dev_err(&client->dev,
-				"prim-ser already exists\n");
-				return -EEXIST;
-		}
-
 		err = of_property_read_u32(node, "reg", &priv->def_addr);
 		if (err < 0) {
 			dev_err(&client->dev, "reg not found\n");
 			return -EINVAL;
 		}
 
-		prim_priv__ = priv;
+	} else {
+		prim_node = of_parse_phandle(node, "prim-ser", 0);
+		if (!prim_node) {
+			dev_err(&client->dev,
+				"Failed to get primary serializer phandle");
+			return -EINVAL;
+		}
+
+		prim_client = of_find_i2c_device_by_node(prim_node);
+		of_node_put(prim_node);
+		if (!prim_client) {
+			dev_err(&client->dev,
+				"Failed to get primary i2c client");
+			return -EPROBE_DEFER; // Try again later
+		}
+
+		priv->prim_priv = i2c_get_clientdata(prim_client);
 	}
 
 	dev_set_drvdata(&client->dev, priv);
@@ -710,4 +778,5 @@ module_exit(max9295_exit);
 
 MODULE_DESCRIPTION("GMSL Serializer driver max9295");
 MODULE_AUTHOR("Sudhir Vyas <svyas@nvidia.com>");
+MODULE_AUTHOR("Alex Hoffman <alxhoff@cartken.com>");
 MODULE_LICENSE("GPL v2");
diff --git a/kernel/nvidia/drivers/media/i2c/max9296.c b/kernel/nvidia/drivers/media/i2c/max9296.c
index 316e687a1..0f99e310b 100644
--- a/kernel/nvidia/drivers/media/i2c/max9296.c
+++ b/kernel/nvidia/drivers/media/i2c/max9296.c
@@ -332,6 +332,11 @@ int max9296_setup_control(struct device *dev, struct device *s_dev)
 	int err = 0;
 	unsigned int i = 0;
 
+	if (!priv) {
+		dev_err(dev, "Couldn't get drvdata");
+		return -EINVAL;
+	}
+
 	err = max9296_get_sdev_idx(dev, s_dev, &i);
 	if (err)
 		return err;
@@ -390,10 +395,16 @@ int max9296_reset_control(struct device *dev, struct device *s_dev)
 	struct max9296 *priv = dev_get_drvdata(dev);
 	int err = 0;
 
+	if (!priv) {
+		dev_err(dev, "Couldn't get drvdata\n");
+		err = -EINVAL;
+		goto ret;
+	}
+
 	mutex_lock(&priv->lock);
 	if (!priv->sdev_ref) {
 		dev_info(dev, "%s: dev is already in reset state\n", __func__);
-		goto ret;
+		goto unlock;
 	}
 
 	priv->sdev_ref--;
@@ -401,13 +412,15 @@ int max9296_reset_control(struct device *dev, struct device *s_dev)
 		max9296_reset_ctx(priv);
 		max9296_write_reg(dev, MAX9296_CTRL0_ADDR, MAX9296_RESET_ALL);
 
+		mutex_unlock(&priv->lock);
 		/* delay to settle reset */
 		msleep(100);
+		goto ret;
 	}
 
-ret:
+unlock:
 	mutex_unlock(&priv->lock);
-
+ret:
 	return err;
 }
 EXPORT_SYMBOL(max9296_reset_control);
@@ -963,8 +976,6 @@ int max9296_set_pipe(struct device *dev, int pipe_id,
 
 	err = __max9296_set_pipe(dev, pipe_id, data_type1, data_type2, vc_id);
 
-	mutex_unlock(&priv->lock);
-
 	return err;
 }
 EXPORT_SYMBOL(max9296_set_pipe);
diff --git a/kernel/nvidia/include/media/max9295.h b/kernel/nvidia/include/media/max9295.h
index bea15c414..ed5965d50 100644
--- a/kernel/nvidia/include/media/max9295.h
+++ b/kernel/nvidia/include/media/max9295.h
@@ -27,6 +27,7 @@
 
 #include <linux/types.h>
 #include <media/gmsl-link.h>
+#include <linux/regmap.h>
 /**
  * \defgroup max9295 MAX9295 serializer driver
  *
@@ -39,6 +40,19 @@
 int max9295_set_pipe(struct device *dev, int pipe_id, u8 data_type1,
 		     u8 data_type2, u32 vc_id);
 
+/**
+ * @brief  Creates regmap shared by all attached ds5 devices
+ *
+ * @param  [in]  dev            The serializer device handle.
+ * @param  [in]  c              i2c client dev
+ * @param  [in]  rm_config      Regmap config to be used for the d4xx device
+ *
+ * @return Pointer to regmap, NULL on error
+ */
+struct regmap *
+max9295_sensor_regmap_init(struct device *dev, struct i2c_client *c,
+			   const struct regmap_config *rm_config);
+
 /**
  * @brief  Powers on a serializer device and performs the I2C overrides
  * for sensor and serializer devices.
