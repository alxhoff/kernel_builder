From f2d2cee0ef1b0da0c257faed5122281d59ded635 Mon Sep 17 00:00:00 2001
From: Anubhav rai <arai@nvidia.com>
Date: Fri, 2 Feb 2024 01:40:35 +0000
Subject: [PATCH] vi5_fops: fix mem leak

release capture requests and embedded data
buffers before closing and exiting the stream

bug 4336756

Change-Id: Iba856eea9757a8226bc949ae1d72a87adf2d55eb
Signed-off-by: Anubhav rai <arai@nvidia.com>
---
 .../media/platform/tegra/camera/vi/vi5_fops.c | 21 +++++++++++++++++++
 include/media/mc_common.h                     |  2 ++
 2 files changed, 23 insertions(+)

diff --git a/drivers/media/platform/tegra/camera/vi/vi5_fops.c b/drivers/media/platform/tegra/camera/vi/vi5_fops.c
index 3d29ee78..e2819050 100644
--- a/drivers/media/platform/tegra/camera/vi/vi5_fops.c
+++ b/drivers/media/platform/tegra/camera/vi/vi5_fops.c
@@ -319,6 +319,8 @@ static int tegra_channel_capture_setup(struct tegra_channel *chan, unsigned int
        chan->request[vi_port] = dma_alloc_coherent(chan->tegra_vi_channel[vi_port]->rtcpu_dev,
                                        setup.queue_depth * setup.request_size,
                                        &setup.iova, GFP_KERNEL);
+       chan->request_iova[vi_port] = setup.iova;
+
        if (chan->request[vi_port] == NULL) {
                dev_err(chan->vi->dev, "dma_alloc_coherent failed\n");
                return -ENOMEM;
@@ -967,6 +969,24 @@ static int vi5_channel_stop_streaming(struct vb2_queue *vq)
                                dev_err(&chan->video->dev,
                                        "vi capture release failed\n");
 
+                       /* Release capture requests */
+                       if (chan->request[vi_port] != NULL) {
+                               dma_free_coherent(chan->tegra_vi_channel[vi_port]->rtcpu_dev,
+                               chan->capture_queue_depth * sizeof(struct capture_descriptor),
+                               chan->request[vi_port], chan->request_iova[vi_port]);
+                       }
+                       chan->request[vi_port] = NULL;
+
+                       /* Release emd data buffers */
+                       if (chan->emb_buf_size > 0) {
+                               struct device *vi_unit_dev;
+                               vi5_unit_get_device_handle(chan->vi->ndev, chan->port[0],\
+                                                                               &vi_unit_dev);
+                               dma_free_coherent(vi_unit_dev, chan->emb_buf_size,
+                                                               chan->emb_buf_addr, chan->emb_buf);
+                               chan->emb_buf_size = 0;
+                       }
+
                        vi_channel_close_ex(chan->vi_channel_id[vi_port],
                                                chan->tegra_vi_channel[vi_port]);
                        chan->tegra_vi_channel[vi_port] = NULL;
@@ -974,6 +994,7 @@ static int vi5_channel_stop_streaming(struct vb2_queue *vq)
 
                /* release all remaining buffers to v4l2 */
                tegra_channel_queued_buf_done(chan, VB2_BUF_STATE_ERROR, false);
+
        }
 
        return 0;
diff --git a/include/media/mc_common.h b/include/media/mc_common.h
index fcbac713..ec75f6e0 100644
--- a/include/media/mc_common.h
+++ b/include/media/mc_common.h
@@ -251,6 +251,8 @@ struct tegra_channel {
        struct nvcsi_deskew_context *deskew_ctx;
        struct tegra_vi_channel *tegra_vi_channel[TEGRA_CSI_BLOCKS];
        struct capture_descriptor *request[TEGRA_CSI_BLOCKS];
+       dma_addr_t request_iova[TEGRA_CSI_BLOCKS];
+
        bool is_slvsec;
        int is_interlaced;
        enum interlaced_type interlace_type;
-- 
2.17.1
